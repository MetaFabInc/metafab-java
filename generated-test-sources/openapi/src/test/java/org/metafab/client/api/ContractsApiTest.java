/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiException;
import org.openapitools.client.model.ContractModel;
import org.openapitools.client.model.CreateContractRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.WriteContractRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContractsApi
 */
@Disabled
public class ContractsApiTest {

    private final ContractsApi api = new ContractsApi();

    /**
     * Create custom contract
     *
     * Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract&#39;s read and write functions through MetaFab&#39;s read and write contract endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContractTest() throws ApiException {
        String xAuthorization = null;
        CreateContractRequest createContractRequest = null;
        ContractModel response = api.createContract(xAuthorization, createContractRequest);
        // TODO: test validations
    }

    /**
     * Get contracts
     *
     * Returns an array of active contracts deployed by the game associated with the provided &#x60;X-Game-Key&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractsTest() throws ApiException {
        String xGameKey = null;
        List<ContractModel> response = api.getContracts(xGameKey);
        // TODO: test validations
    }

    /**
     * Read contract data
     *
     * Oftentimes you&#39;ll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readContractTest() throws ApiException {
        String contractId = null;
        String func = null;
        String args = null;
        Object response = api.readContract(contractId, func, args);
        // TODO: test validations
    }

    /**
     * Write contract data
     *
     * MetaFab&#39;s convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract&#39;s ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab&#39;s ERC2771 trusted forwarder contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeContractTest() throws ApiException {
        String contractId = null;
        String xAuthorization = null;
        String xPassword = null;
        WriteContractRequest writeContractRequest = null;
        TransactionModel response = api.writeContract(contractId, xAuthorization, xPassword, writeContractRequest);
        // TODO: test validations
    }

}
