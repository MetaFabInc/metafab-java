/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiException;
import org.openapitools.client.model.ApproveEcosystemGameRequest;
import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.AuthProfile200Response;
import org.openapitools.client.model.CreateEcosystemRequest;
import org.openapitools.client.model.CreateProfilePlayerRequest;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.EcosystemModel;
import org.openapitools.client.model.GetProfileGames200ResponseInner;
import org.openapitools.client.model.ProfileModel;
import org.openapitools.client.model.PublicEcosystem;
import org.openapitools.client.model.PublicGame;
import org.openapitools.client.model.UpdateEcosystemRequest;
import org.openapitools.client.model.UpdateProfilePlayer200Response;
import org.openapitools.client.model.UpdateProfilePlayerRequest;
import org.openapitools.client.model.UpdateProfileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EcosystemsApi
 */
@Disabled
public class EcosystemsApiTest {

    private final EcosystemsApi api = new EcosystemsApi();

    /**
     * Approve ecosystem game
     *
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveEcosystemGameTest() throws ApiException {
        String ecosystemId = null;
        String xAuthorization = null;
        ApproveEcosystemGameRequest approveEcosystemGameRequest = null;
        api.approveEcosystemGame(ecosystemId, xAuthorization, approveEcosystemGameRequest);
        // TODO: test validations
    }

    /**
     * Authenticate ecosystem
     *
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authEcosystemTest() throws ApiException {
        EcosystemModel response = api.authEcosystem();
        // TODO: test validations
    }

    /**
     * Authenticate profile
     *
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authProfileTest() throws ApiException {
        String xEcosystemKey = null;
        AuthProfile200Response response = api.authProfile(xEcosystemKey);
        // TODO: test validations
    }

    /**
     * Authenticate profile player
     *
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authProfilePlayerTest() throws ApiException {
        String profileId = null;
        String gameId = null;
        String xAuthorization = null;
        String xWalletDecryptKey = null;
        String xUsername = null;
        AuthPlayer200Response response = api.authProfilePlayer(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername);
        // TODO: test validations
    }

    /**
     * Create ecosystem
     *
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEcosystemTest() throws ApiException {
        CreateEcosystemRequest createEcosystemRequest = null;
        EcosystemModel response = api.createEcosystem(createEcosystemRequest);
        // TODO: test validations
    }

    /**
     * Create profile
     *
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        String xEcosystemKey = null;
        CreateProfileRequest createProfileRequest = null;
        AuthProfile200Response response = api.createProfile(xEcosystemKey, createProfileRequest);
        // TODO: test validations
    }

    /**
     * Create profile player
     *
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfilePlayerTest() throws ApiException {
        String profileId = null;
        String gameId = null;
        String xAuthorization = null;
        String xWalletDecryptKey = null;
        CreateProfilePlayerRequest createProfilePlayerRequest = null;
        AuthPlayer200Response response = api.createProfilePlayer(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest);
        // TODO: test validations
    }

    /**
     * Get ecosystem
     *
     * Returns a ecosystem object for the provided ecosystem id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEcosystemTest() throws ApiException {
        String ecosystemId = null;
        PublicEcosystem response = api.getEcosystem(ecosystemId);
        // TODO: test validations
    }

    /**
     * Get ecosystem game
     *
     * Returns a game object for the provided game id that the ecosystem has approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEcosystemGameTest() throws ApiException {
        String ecosystemId = null;
        String gameId = null;
        PublicGame response = api.getEcosystemGame(ecosystemId, gameId);
        // TODO: test validations
    }

    /**
     * Get ecosystem games
     *
     * Returns an array of games the ecosystem has approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEcosystemGamesTest() throws ApiException {
        String ecosystemId = null;
        List<PublicGame> response = api.getEcosystemGames(ecosystemId);
        // TODO: test validations
    }

    /**
     * Get profile game
     *
     * Returns a game this profile has connected player accounts for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileGameTest() throws ApiException {
        String profileId = null;
        String gameId = null;
        String xAuthorization = null;
        GetProfileGames200ResponseInner response = api.getProfileGame(profileId, gameId, xAuthorization);
        // TODO: test validations
    }

    /**
     * Get profile games
     *
     * Returns an array of games the authorized profile has connected player accounts for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileGamesTest() throws ApiException {
        String profileId = null;
        String xAuthorization = null;
        List<GetProfileGames200ResponseInner> response = api.getProfileGames(profileId, xAuthorization);
        // TODO: test validations
    }

    /**
     * Unapprove ecosystem game
     *
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unapproveEcosystemGameTest() throws ApiException {
        String ecosystemId = null;
        String gameId = null;
        String xAuthorization = null;
        api.unapproveEcosystemGame(ecosystemId, gameId, xAuthorization);
        // TODO: test validations
    }

    /**
     * Update ecosystem
     *
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEcosystemTest() throws ApiException {
        String ecosystemId = null;
        String xAuthorization = null;
        UpdateEcosystemRequest updateEcosystemRequest = null;
        EcosystemModel response = api.updateEcosystem(ecosystemId, xAuthorization, updateEcosystemRequest);
        // TODO: test validations
    }

    /**
     * Update profile
     *
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String profileId = null;
        String xAuthorization = null;
        UpdateProfileRequest updateProfileRequest = null;
        ProfileModel response = api.updateProfile(profileId, xAuthorization, updateProfileRequest);
        // TODO: test validations
    }

    /**
     * Update profile player
     *
     * Update various fields specific to a player. Such as changing its permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfilePlayerTest() throws ApiException {
        String profileId = null;
        String gameId = null;
        String playerId = null;
        String xAuthorization = null;
        String xWalletDecryptKey = null;
        UpdateProfilePlayerRequest updateProfilePlayerRequest = null;
        UpdateProfilePlayer200Response response = api.updateProfilePlayer(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest);
        // TODO: test validations
    }

}
