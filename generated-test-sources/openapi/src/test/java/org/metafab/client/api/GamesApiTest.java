/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiException;
import org.openapitools.client.model.AuthGame200Response;
import org.openapitools.client.model.CreateGameRequest;
import org.openapitools.client.model.GameModel;
import org.openapitools.client.model.PublicGame;
import org.openapitools.client.model.UpdateGameRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GamesApi
 */
@Disabled
public class GamesApiTest {

    private final GamesApi api = new GamesApi();

    /**
     * Authenticate game
     *
     * Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authGameTest() throws ApiException {
        AuthGame200Response response = api.authGame();
        // TODO: test validations
    }

    /**
     * Create game
     *
     * Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab&#39;s services, you must first create a game through this endpoint.  After creating your game through this endpoint, a verification email will be sent to the email address used. Before you can access any of MetaFab&#39;s features, you&#39;ll need to click the link contained in the verification email to verify your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGameTest() throws ApiException {
        CreateGameRequest createGameRequest = null;
        AuthGame200Response response = api.createGame(createGameRequest);
        // TODO: test validations
    }

    /**
     * Get game
     *
     * Returns a game object for the provided game id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGameTest() throws ApiException {
        String gameId = null;
        PublicGame response = api.getGame(gameId);
        // TODO: test validations
    }

    /**
     * Update game
     *
     * Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGameTest() throws ApiException {
        String gameId = null;
        String xAuthorization = null;
        UpdateGameRequest updateGameRequest = null;
        GameModel response = api.updateGame(gameId, xAuthorization, updateGameRequest);
        // TODO: test validations
    }

}
