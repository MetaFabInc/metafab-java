/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiException;
import org.openapitools.client.model.BatchMintCollectionItemsRequest;
import org.openapitools.client.model.BatchTransferCollectionItemsRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.BurnCollectionItemRequest;
import org.openapitools.client.model.CreateCollection200Response;
import org.openapitools.client.model.CreateCollectionItemRequest;
import org.openapitools.client.model.CreateCollectionRequest;
import org.openapitools.client.model.GetCollections200ResponseInner;
import org.openapitools.client.model.MintCollectionItemRequest;
import org.openapitools.client.model.SetCollectionApprovalRequest;
import org.openapitools.client.model.SetCollectionItemTimelockRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.TransferCollectionItemRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemsApi
 */
@Disabled
public class ItemsApiTest {

    private final ItemsApi api = new ItemsApi();

    /**
     * Batch mint collection items
     *
     * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchMintCollectionItemsTest() throws ApiException {
        String collectionId = null;
        String xAuthorization = null;
        String xPassword = null;
        BatchMintCollectionItemsRequest batchMintCollectionItemsRequest = null;
        TransactionModel response = api.batchMintCollectionItems(collectionId, xAuthorization, xPassword, batchMintCollectionItemsRequest);
        // TODO: test validations
    }

    /**
     * Batch transfer collection items
     *
     * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchTransferCollectionItemsTest() throws ApiException {
        String collectionId = null;
        String xAuthorization = null;
        String xPassword = null;
        BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest = null;
        TransactionModel response = api.batchTransferCollectionItems(collectionId, xAuthorization, xPassword, batchTransferCollectionItemsRequest);
        // TODO: test validations
    }

    /**
     * Burn collection item
     *
     * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void burnCollectionItemTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        String xAuthorization = null;
        String xPassword = null;
        BurnCollectionItemRequest burnCollectionItemRequest = null;
        TransactionModel response = api.burnCollectionItem(collectionId, collectionItemId, xAuthorization, xPassword, burnCollectionItemRequest);
        // TODO: test validations
    }

    /**
     * Create collection
     *
     * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        String xAuthorization = null;
        String xPassword = null;
        CreateCollectionRequest createCollectionRequest = null;
        CreateCollection200Response response = api.createCollection(xAuthorization, xPassword, createCollectionRequest);
        // TODO: test validations
    }

    /**
     * Create collection item
     *
     * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence. Any itemId provided will have its existing item type overriden if it already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionItemTest() throws ApiException {
        String collectionId = null;
        String xAuthorization = null;
        String xPassword = null;
        CreateCollectionItemRequest createCollectionItemRequest = null;
        TransactionModel response = api.createCollectionItem(collectionId, xAuthorization, xPassword, createCollectionItemRequest);
        // TODO: test validations
    }

    /**
     * Get collection approval
     *
     * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionApprovalTest() throws ApiException {
        String collectionId = null;
        String operatorAddress = null;
        String address = null;
        String walletId = null;
        BigDecimal response = api.getCollectionApproval(collectionId, operatorAddress, address, walletId);
        // TODO: test validations
    }

    /**
     * Get collection item
     *
     * Returns a metadata object for the provided collectionItemId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        List<Object> response = api.getCollectionItem(collectionId, collectionItemId);
        // TODO: test validations
    }

    /**
     * Get collection item balance
     *
     * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemBalanceTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        String address = null;
        String walletId = null;
        BigDecimal response = api.getCollectionItemBalance(collectionId, collectionItemId, address, walletId);
        // TODO: test validations
    }

    /**
     * Get collection item balances
     *
     * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemBalancesTest() throws ApiException {
        String collectionId = null;
        String address = null;
        String walletId = null;
        Map<String, BigDecimal> response = api.getCollectionItemBalances(collectionId, address, walletId);
        // TODO: test validations
    }

    /**
     * Get collection item supplies
     *
     * Returns the currency circulating supply of all collection items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemSuppliesTest() throws ApiException {
        String collectionId = null;
        Map<String, BigDecimal> response = api.getCollectionItemSupplies(collectionId);
        // TODO: test validations
    }

    /**
     * Get collection item supply
     *
     * Returns the current circulating supply of the provided collectionItemId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemSupplyTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        String address = null;
        String walletId = null;
        BigDecimal response = api.getCollectionItemSupply(collectionId, collectionItemId, address, walletId);
        // TODO: test validations
    }

    /**
     * Get collection item timelock
     *
     * Returns a timestamp (in seconds) for when the provided collectionItemId&#39;s transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemTimelockTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        BigDecimal response = api.getCollectionItemTimelock(collectionId, collectionItemId);
        // TODO: test validations
    }

    /**
     * Get collection items
     *
     * Returns all collection items as an array of metadata objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionItemsTest() throws ApiException {
        String collectionId = null;
        List<Object> response = api.getCollectionItems(collectionId);
        // TODO: test validations
    }

    /**
     * Get collections
     *
     * Returns an array of active item collections for the game associated with the provided &#x60;X-Game-Key&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionsTest() throws ApiException {
        String xGameKey = null;
        List<GetCollections200ResponseInner> response = api.getCollections(xGameKey);
        // TODO: test validations
    }

    /**
     * Mint collection item
     *
     * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mintCollectionItemTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        String xAuthorization = null;
        String xPassword = null;
        MintCollectionItemRequest mintCollectionItemRequest = null;
        TransactionModel response = api.mintCollectionItem(collectionId, collectionItemId, xAuthorization, xPassword, mintCollectionItemRequest);
        // TODO: test validations
    }

    /**
     * Set collection approval
     *
     * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player&#39;s owned items for this collection. Setting an approved value of &#x60;true&#x60; allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCollectionApprovalTest() throws ApiException {
        String collectionId = null;
        String xAuthorization = null;
        String xPassword = null;
        SetCollectionApprovalRequest setCollectionApprovalRequest = null;
        TransactionModel response = api.setCollectionApproval(collectionId, xAuthorization, xPassword, setCollectionApprovalRequest);
        // TODO: test validations
    }

    /**
     * Set collection item timelock
     *
     * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCollectionItemTimelockTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        String xAuthorization = null;
        String xPassword = null;
        SetCollectionItemTimelockRequest setCollectionItemTimelockRequest = null;
        TransactionModel response = api.setCollectionItemTimelock(collectionId, collectionItemId, xAuthorization, xPassword, setCollectionItemTimelockRequest);
        // TODO: test validations
    }

    /**
     * Transfer collection item
     *
     * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferCollectionItemTest() throws ApiException {
        String collectionId = null;
        BigDecimal collectionItemId = null;
        String xAuthorization = null;
        String xPassword = null;
        TransferCollectionItemRequest transferCollectionItemRequest = null;
        TransactionModel response = api.transferCollectionItem(collectionId, collectionItemId, xAuthorization, xPassword, transferCollectionItemRequest);
        // TODO: test validations
    }

}
