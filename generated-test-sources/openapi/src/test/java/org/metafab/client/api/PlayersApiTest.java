/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiException;
import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.CreatePlayerRequest;
import org.openapitools.client.model.GetPlayerData200Response;
import org.openapitools.client.model.PlayerModel;
import org.openapitools.client.model.PublicPlayer;
import org.openapitools.client.model.SetPlayerDataRequest;
import org.openapitools.client.model.UpdatePlayerRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayersApi
 */
@Disabled
public class PlayersApiTest {

    private final PlayersApi api = new PlayersApi();

    /**
     * Authenticate player
     *
     * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authPlayerTest() throws ApiException {
        String xGameKey = null;
        AuthPlayer200Response response = api.authPlayer(xGameKey);
        // TODO: test validations
    }

    /**
     * Create player
     *
     * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlayerTest() throws ApiException {
        String xGameKey = null;
        CreatePlayerRequest createPlayerRequest = null;
        AuthPlayer200Response response = api.createPlayer(xGameKey, createPlayerRequest);
        // TODO: test validations
    }

    /**
     * Get player
     *
     * Returns a player object for the provided player id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerTest() throws ApiException {
        String playerId = null;
        PublicPlayer response = api.getPlayer(playerId);
        // TODO: test validations
    }

    /**
     * Get player data
     *
     * Returns the latest public and protected data as an object for the provided playerId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerDataTest() throws ApiException {
        String playerId = null;
        GetPlayerData200Response response = api.getPlayerData(playerId);
        // TODO: test validations
    }

    /**
     * Get players
     *
     * Returns all players for the authenticated game as an array of player objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayersTest() throws ApiException {
        String xAuthorization = null;
        List<PublicPlayer> response = api.getPlayers(xAuthorization);
        // TODO: test validations
    }

    /**
     * Set player data
     *
     * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPlayerDataTest() throws ApiException {
        String playerId = null;
        String xAuthorization = null;
        SetPlayerDataRequest setPlayerDataRequest = null;
        GetPlayerData200Response response = api.setPlayerData(playerId, xAuthorization, setPlayerDataRequest);
        // TODO: test validations
    }

    /**
     * Update player
     *
     * Update various fields specific to a player. Such as changing its password and resetting its access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlayerTest() throws ApiException {
        String playerId = null;
        String xAuthorization = null;
        UpdatePlayerRequest updatePlayerRequest = null;
        PlayerModel response = api.updatePlayer(playerId, xAuthorization, updatePlayerRequest);
        // TODO: test validations
    }

}
