/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContractModel;
import org.openapitools.client.model.CreateContractRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.TransferContractOwnershipRequest;
import org.openapitools.client.model.UpgradeContractTrustedForwarderRequest;
import org.openapitools.client.model.WriteContractRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createContract
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param createContractRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a MetaFab contract entry. Returns a contract object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContractCall(String xAuthorization, CreateContractRequest createContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContractRequest;

        // create path and map variables
        String localVarPath = "/v1/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContractValidateBeforeCall(String xAuthorization, CreateContractRequest createContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createContract(Async)");
        }

        // verify the required parameter 'createContractRequest' is set
        if (createContractRequest == null) {
            throw new ApiException("Missing the required parameter 'createContractRequest' when calling createContract(Async)");
        }

        return createContractCall(xAuthorization, createContractRequest, _callback);

    }

    /**
     * Create custom contract
     * Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract&#39;s read and write functions through MetaFab&#39;s read and write contract endpoints.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param createContractRequest  (required)
     * @return ContractModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a MetaFab contract entry. Returns a contract object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ContractModel createContract(String xAuthorization, CreateContractRequest createContractRequest) throws ApiException {
        ApiResponse<ContractModel> localVarResp = createContractWithHttpInfo(xAuthorization, createContractRequest);
        return localVarResp.getData();
    }

    /**
     * Create custom contract
     * Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract&#39;s read and write functions through MetaFab&#39;s read and write contract endpoints.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param createContractRequest  (required)
     * @return ApiResponse&lt;ContractModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a MetaFab contract entry. Returns a contract object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractModel> createContractWithHttpInfo(String xAuthorization, CreateContractRequest createContractRequest) throws ApiException {
        okhttp3.Call localVarCall = createContractValidateBeforeCall(xAuthorization, createContractRequest, null);
        Type localVarReturnType = new TypeToken<ContractModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create custom contract (asynchronously)
     * Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract&#39;s read and write functions through MetaFab&#39;s read and write contract endpoints.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param createContractRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a MetaFab contract entry. Returns a contract object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContractAsync(String xAuthorization, CreateContractRequest createContractRequest, final ApiCallback<ContractModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContractValidateBeforeCall(xAuthorization, createContractRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContracts
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of contracts for the game associated with the provided &#x60;X-Game-Key&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractsValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling getContracts(Async)");
        }

        return getContractsCall(xGameKey, _callback);

    }

    /**
     * Get contracts
     * Returns an array of active contracts deployed by the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return List&lt;ContractModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of contracts for the game associated with the provided &#x60;X-Game-Key&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<ContractModel> getContracts(String xGameKey) throws ApiException {
        ApiResponse<List<ContractModel>> localVarResp = getContractsWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Get contracts
     * Returns an array of active contracts deployed by the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;List&lt;ContractModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of contracts for the game associated with the provided &#x60;X-Game-Key&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContractModel>> getContractsWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = getContractsValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<List<ContractModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contracts (asynchronously)
     * Returns an array of active contracts deployed by the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of contracts for the game associated with the provided &#x60;X-Game-Key&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsAsync(String xGameKey, final ApiCallback<List<ContractModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractsValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<List<ContractModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readContract
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved value returned by contract function. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readContractCall(String contractId, String func, String args, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contracts/{contractId}/reads"
            .replace("{" + "contractId" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (func != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("func", func));
        }

        if (args != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("args", args));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readContractValidateBeforeCall(String contractId, String func, String args, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling readContract(Async)");
        }

        // verify the required parameter 'func' is set
        if (func == null) {
            throw new ApiException("Missing the required parameter 'func' when calling readContract(Async)");
        }

        return readContractCall(contractId, func, args, _callback);

    }

    /**
     * Read contract data
     * Oftentimes you&#39;ll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved value returned by contract function. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Object readContract(String contractId, String func, String args) throws ApiException {
        ApiResponse<Object> localVarResp = readContractWithHttpInfo(contractId, func, args);
        return localVarResp.getData();
    }

    /**
     * Read contract data
     * Oftentimes you&#39;ll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved value returned by contract function. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> readContractWithHttpInfo(String contractId, String func, String args) throws ApiException {
        okhttp3.Call localVarCall = readContractValidateBeforeCall(contractId, func, args, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read contract data (asynchronously)
     * Oftentimes you&#39;ll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved value returned by contract function. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readContractAsync(String contractId, String func, String args, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = readContractValidateBeforeCall(contractId, func, args, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferContractOwnership
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param transferContractOwnershipRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred ownership of the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferContractOwnershipCall(String contractId, String xAuthorization, String xWalletDecryptKey, TransferContractOwnershipRequest transferContractOwnershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferContractOwnershipRequest;

        // create path and map variables
        String localVarPath = "/v1/contracts/{contractId}/owners"
            .replace("{" + "contractId" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferContractOwnershipValidateBeforeCall(String contractId, String xAuthorization, String xWalletDecryptKey, TransferContractOwnershipRequest transferContractOwnershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling transferContractOwnership(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling transferContractOwnership(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling transferContractOwnership(Async)");
        }

        // verify the required parameter 'transferContractOwnershipRequest' is set
        if (transferContractOwnershipRequest == null) {
            throw new ApiException("Missing the required parameter 'transferContractOwnershipRequest' when calling transferContractOwnership(Async)");
        }

        return transferContractOwnershipCall(contractId, xAuthorization, xWalletDecryptKey, transferContractOwnershipRequest, _callback);

    }

    /**
     * Transfer contract ownership
     * Transfer ownership and control of a MetaFab deployed smart contract to another wallet you control. Transferring control does not disrupt your usage of MetaFab APIs and can be done so without causing any service outages for your game. The new owner wallet will have full control over any relevant item collections and marketplace related pages this contract may be associated with, such as for MetaFab item or NFT contracts.  Your game&#39;s custodial wallet will retain a &#x60;MANAGER_ROLE&#x60; on your contracts, allowing you to still use MetaFab APIs without issue while you retain full contract ownership and the contract&#39;s administrator role. If ever you want eject from using the MetaFab APIs but still retain your deployed smart contracts, you can revoke the &#x60;MANAGER_ROLE&#x60; from your game&#39;s custodial wallet address for your contract. We do not lock you into our systems.  Please be certain that the wallet address you transfer ownership to is one you control. Once ownership and admin permissions are transferred, your game&#39;s custodial wallet no longer has permission to reassign ownership or administrative priveleges for your contract.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param transferContractOwnershipRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred ownership of the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel transferContractOwnership(String contractId, String xAuthorization, String xWalletDecryptKey, TransferContractOwnershipRequest transferContractOwnershipRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = transferContractOwnershipWithHttpInfo(contractId, xAuthorization, xWalletDecryptKey, transferContractOwnershipRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer contract ownership
     * Transfer ownership and control of a MetaFab deployed smart contract to another wallet you control. Transferring control does not disrupt your usage of MetaFab APIs and can be done so without causing any service outages for your game. The new owner wallet will have full control over any relevant item collections and marketplace related pages this contract may be associated with, such as for MetaFab item or NFT contracts.  Your game&#39;s custodial wallet will retain a &#x60;MANAGER_ROLE&#x60; on your contracts, allowing you to still use MetaFab APIs without issue while you retain full contract ownership and the contract&#39;s administrator role. If ever you want eject from using the MetaFab APIs but still retain your deployed smart contracts, you can revoke the &#x60;MANAGER_ROLE&#x60; from your game&#39;s custodial wallet address for your contract. We do not lock you into our systems.  Please be certain that the wallet address you transfer ownership to is one you control. Once ownership and admin permissions are transferred, your game&#39;s custodial wallet no longer has permission to reassign ownership or administrative priveleges for your contract.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param transferContractOwnershipRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred ownership of the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> transferContractOwnershipWithHttpInfo(String contractId, String xAuthorization, String xWalletDecryptKey, TransferContractOwnershipRequest transferContractOwnershipRequest) throws ApiException {
        okhttp3.Call localVarCall = transferContractOwnershipValidateBeforeCall(contractId, xAuthorization, xWalletDecryptKey, transferContractOwnershipRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer contract ownership (asynchronously)
     * Transfer ownership and control of a MetaFab deployed smart contract to another wallet you control. Transferring control does not disrupt your usage of MetaFab APIs and can be done so without causing any service outages for your game. The new owner wallet will have full control over any relevant item collections and marketplace related pages this contract may be associated with, such as for MetaFab item or NFT contracts.  Your game&#39;s custodial wallet will retain a &#x60;MANAGER_ROLE&#x60; on your contracts, allowing you to still use MetaFab APIs without issue while you retain full contract ownership and the contract&#39;s administrator role. If ever you want eject from using the MetaFab APIs but still retain your deployed smart contracts, you can revoke the &#x60;MANAGER_ROLE&#x60; from your game&#39;s custodial wallet address for your contract. We do not lock you into our systems.  Please be certain that the wallet address you transfer ownership to is one you control. Once ownership and admin permissions are transferred, your game&#39;s custodial wallet no longer has permission to reassign ownership or administrative priveleges for your contract.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param transferContractOwnershipRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred ownership of the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferContractOwnershipAsync(String contractId, String xAuthorization, String xWalletDecryptKey, TransferContractOwnershipRequest transferContractOwnershipRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferContractOwnershipValidateBeforeCall(contractId, xAuthorization, xWalletDecryptKey, transferContractOwnershipRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upgradeContractTrustedForwarder
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param upgradeContractTrustedForwarderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upgraded the trusted forwarder for the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradeContractTrustedForwarderCall(String contractId, String xAuthorization, String xWalletDecryptKey, UpgradeContractTrustedForwarderRequest upgradeContractTrustedForwarderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upgradeContractTrustedForwarderRequest;

        // create path and map variables
        String localVarPath = "/v1/contracts/{contractId}/forwarders"
            .replace("{" + "contractId" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradeContractTrustedForwarderValidateBeforeCall(String contractId, String xAuthorization, String xWalletDecryptKey, UpgradeContractTrustedForwarderRequest upgradeContractTrustedForwarderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling upgradeContractTrustedForwarder(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling upgradeContractTrustedForwarder(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling upgradeContractTrustedForwarder(Async)");
        }

        // verify the required parameter 'upgradeContractTrustedForwarderRequest' is set
        if (upgradeContractTrustedForwarderRequest == null) {
            throw new ApiException("Missing the required parameter 'upgradeContractTrustedForwarderRequest' when calling upgradeContractTrustedForwarder(Async)");
        }

        return upgradeContractTrustedForwarderCall(contractId, xAuthorization, xWalletDecryptKey, upgradeContractTrustedForwarderRequest, _callback);

    }

    /**
     * Upgrade contract trusted forwarder
     * In rare circumstances, you may need to upgrade the underlying trusted forwarder contract address attached to your game&#39;s contracts. Using this endpoint, you can provide a new trusted forwarder contract address to assign to any of your contracts that implement the &#x60;upgradeTrustedForwarder&#x60; function.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param upgradeContractTrustedForwarderRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upgraded the trusted forwarder for the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel upgradeContractTrustedForwarder(String contractId, String xAuthorization, String xWalletDecryptKey, UpgradeContractTrustedForwarderRequest upgradeContractTrustedForwarderRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = upgradeContractTrustedForwarderWithHttpInfo(contractId, xAuthorization, xWalletDecryptKey, upgradeContractTrustedForwarderRequest);
        return localVarResp.getData();
    }

    /**
     * Upgrade contract trusted forwarder
     * In rare circumstances, you may need to upgrade the underlying trusted forwarder contract address attached to your game&#39;s contracts. Using this endpoint, you can provide a new trusted forwarder contract address to assign to any of your contracts that implement the &#x60;upgradeTrustedForwarder&#x60; function.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param upgradeContractTrustedForwarderRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upgraded the trusted forwarder for the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> upgradeContractTrustedForwarderWithHttpInfo(String contractId, String xAuthorization, String xWalletDecryptKey, UpgradeContractTrustedForwarderRequest upgradeContractTrustedForwarderRequest) throws ApiException {
        okhttp3.Call localVarCall = upgradeContractTrustedForwarderValidateBeforeCall(contractId, xAuthorization, xWalletDecryptKey, upgradeContractTrustedForwarderRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upgrade contract trusted forwarder (asynchronously)
     * In rare circumstances, you may need to upgrade the underlying trusted forwarder contract address attached to your game&#39;s contracts. Using this endpoint, you can provide a new trusted forwarder contract address to assign to any of your contracts that implement the &#x60;upgradeTrustedForwarder&#x60; function.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param upgradeContractTrustedForwarderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upgraded the trusted forwarder for the target contract. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradeContractTrustedForwarderAsync(String contractId, String xAuthorization, String xWalletDecryptKey, UpgradeContractTrustedForwarderRequest upgradeContractTrustedForwarderRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradeContractTrustedForwarderValidateBeforeCall(contractId, xAuthorization, xWalletDecryptKey, upgradeContractTrustedForwarderRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for writeContract
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param writeContractRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully executed and confirmed the transaction. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call writeContractCall(String contractId, String xAuthorization, String xWalletDecryptKey, WriteContractRequest writeContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writeContractRequest;

        // create path and map variables
        String localVarPath = "/v1/contracts/{contractId}/writes"
            .replace("{" + "contractId" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call writeContractValidateBeforeCall(String contractId, String xAuthorization, String xWalletDecryptKey, WriteContractRequest writeContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling writeContract(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling writeContract(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling writeContract(Async)");
        }

        // verify the required parameter 'writeContractRequest' is set
        if (writeContractRequest == null) {
            throw new ApiException("Missing the required parameter 'writeContractRequest' when calling writeContract(Async)");
        }

        return writeContractCall(contractId, xAuthorization, xWalletDecryptKey, writeContractRequest, _callback);

    }

    /**
     * Write contract data
     * MetaFab&#39;s convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract&#39;s ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab&#39;s ERC2771 trusted forwarder contract.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param writeContractRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully executed and confirmed the transaction. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel writeContract(String contractId, String xAuthorization, String xWalletDecryptKey, WriteContractRequest writeContractRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = writeContractWithHttpInfo(contractId, xAuthorization, xWalletDecryptKey, writeContractRequest);
        return localVarResp.getData();
    }

    /**
     * Write contract data
     * MetaFab&#39;s convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract&#39;s ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab&#39;s ERC2771 trusted forwarder contract.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param writeContractRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully executed and confirmed the transaction. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> writeContractWithHttpInfo(String contractId, String xAuthorization, String xWalletDecryptKey, WriteContractRequest writeContractRequest) throws ApiException {
        okhttp3.Call localVarCall = writeContractValidateBeforeCall(contractId, xAuthorization, xWalletDecryptKey, writeContractRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write contract data (asynchronously)
     * MetaFab&#39;s convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract&#39;s ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab&#39;s ERC2771 trusted forwarder contract.
     * @param contractId Any contract id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param writeContractRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully executed and confirmed the transaction. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call writeContractAsync(String contractId, String xAuthorization, String xWalletDecryptKey, WriteContractRequest writeContractRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = writeContractValidateBeforeCall(contractId, xAuthorization, xWalletDecryptKey, writeContractRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
