/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApproveEcosystemGameRequest;
import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.AuthProfile200Response;
import org.openapitools.client.model.CreateEcosystemRequest;
import org.openapitools.client.model.CreateProfilePlayerRequest;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.EcosystemModel;
import org.openapitools.client.model.GetProfileGames200ResponseInner;
import org.openapitools.client.model.ProfileModel;
import org.openapitools.client.model.PublicEcosystem;
import org.openapitools.client.model.PublicGame;
import org.openapitools.client.model.UpdateEcosystemRequest;
import org.openapitools.client.model.UpdateProfilePlayer200Response;
import org.openapitools.client.model.UpdateProfilePlayerRequest;
import org.openapitools.client.model.UpdateProfileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EcosystemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EcosystemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EcosystemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for approveEcosystemGame
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param approveEcosystemGameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveEcosystemGameCall(String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approveEcosystemGameRequest;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/{ecosystemId}/games"
            .replace("{" + "ecosystemId" + "}", localVarApiClient.escapeString(ecosystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveEcosystemGameValidateBeforeCall(String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling approveEcosystemGame(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling approveEcosystemGame(Async)");
        }

        // verify the required parameter 'approveEcosystemGameRequest' is set
        if (approveEcosystemGameRequest == null) {
            throw new ApiException("Missing the required parameter 'approveEcosystemGameRequest' when calling approveEcosystemGame(Async)");
        }

        return approveEcosystemGameCall(ecosystemId, xAuthorization, approveEcosystemGameRequest, _callback);

    }

    /**
     * Approve ecosystem game
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param approveEcosystemGameRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public void approveEcosystemGame(String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest) throws ApiException {
        approveEcosystemGameWithHttpInfo(ecosystemId, xAuthorization, approveEcosystemGameRequest);
    }

    /**
     * Approve ecosystem game
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param approveEcosystemGameRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> approveEcosystemGameWithHttpInfo(String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest) throws ApiException {
        okhttp3.Call localVarCall = approveEcosystemGameValidateBeforeCall(ecosystemId, xAuthorization, approveEcosystemGameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Approve ecosystem game (asynchronously)
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param approveEcosystemGameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveEcosystemGameAsync(String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveEcosystemGameValidateBeforeCall(ecosystemId, xAuthorization, approveEcosystemGameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authEcosystem
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved an ecosystem object containing authorization keys and credentials. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authEcosystemCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authEcosystemValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return authEcosystemCall(_callback);

    }

    /**
     * Authenticate ecosystem
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * @return EcosystemModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved an ecosystem object containing authorization keys and credentials. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public EcosystemModel authEcosystem() throws ApiException {
        ApiResponse<EcosystemModel> localVarResp = authEcosystemWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Authenticate ecosystem
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * @return ApiResponse&lt;EcosystemModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved an ecosystem object containing authorization keys and credentials. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EcosystemModel> authEcosystemWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = authEcosystemValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EcosystemModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate ecosystem (asynchronously)
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved an ecosystem object containing authorization keys and credentials. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authEcosystemAsync(final ApiCallback<EcosystemModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = authEcosystemValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EcosystemModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authProfile
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a profile object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authProfileCall(String xEcosystemKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEcosystemKey != null) {
            localVarHeaderParams.put("X-Ecosystem-Key", localVarApiClient.parameterToString(xEcosystemKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authProfileValidateBeforeCall(String xEcosystemKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xEcosystemKey' is set
        if (xEcosystemKey == null) {
            throw new ApiException("Missing the required parameter 'xEcosystemKey' when calling authProfile(Async)");
        }

        return authProfileCall(xEcosystemKey, _callback);

    }

    /**
     * Authenticate profile
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @return AuthProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a profile object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public AuthProfile200Response authProfile(String xEcosystemKey) throws ApiException {
        ApiResponse<AuthProfile200Response> localVarResp = authProfileWithHttpInfo(xEcosystemKey);
        return localVarResp.getData();
    }

    /**
     * Authenticate profile
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @return ApiResponse&lt;AuthProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a profile object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthProfile200Response> authProfileWithHttpInfo(String xEcosystemKey) throws ApiException {
        okhttp3.Call localVarCall = authProfileValidateBeforeCall(xEcosystemKey, null);
        Type localVarReturnType = new TypeToken<AuthProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate profile (asynchronously)
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a profile object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authProfileAsync(String xEcosystemKey, final ApiCallback<AuthProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = authProfileValidateBeforeCall(xEcosystemKey, _callback);
        Type localVarReturnType = new TypeToken<AuthProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authProfilePlayer
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param xUsername The username of a player. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, profile authorization, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authProfilePlayerCall(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players/auth"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        if (xUsername != null) {
            localVarHeaderParams.put("X-Username", localVarApiClient.parameterToString(xUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authProfilePlayerValidateBeforeCall(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling authProfilePlayer(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling authProfilePlayer(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling authProfilePlayer(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling authProfilePlayer(Async)");
        }

        // verify the required parameter 'xUsername' is set
        if (xUsername == null) {
            throw new ApiException("Missing the required parameter 'xUsername' when calling authProfilePlayer(Async)");
        }

        return authProfilePlayerCall(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername, _callback);

    }

    /**
     * Authenticate profile player
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param xUsername The username of a player. (required)
     * @return AuthPlayer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, profile authorization, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public AuthPlayer200Response authProfilePlayer(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername) throws ApiException {
        ApiResponse<AuthPlayer200Response> localVarResp = authProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername);
        return localVarResp.getData();
    }

    /**
     * Authenticate profile player
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param xUsername The username of a player. (required)
     * @return ApiResponse&lt;AuthPlayer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, profile authorization, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthPlayer200Response> authProfilePlayerWithHttpInfo(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername) throws ApiException {
        okhttp3.Call localVarCall = authProfilePlayerValidateBeforeCall(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername, null);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate profile player (asynchronously)
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param xUsername The username of a player. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, profile authorization, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authProfilePlayerAsync(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername, final ApiCallback<AuthPlayer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = authProfilePlayerValidateBeforeCall(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername, _callback);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEcosystem
     * @param createEcosystemRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new ecosystem. Returns an ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEcosystemCall(CreateEcosystemRequest createEcosystemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEcosystemRequest;

        // create path and map variables
        String localVarPath = "/v1/ecosystems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEcosystemValidateBeforeCall(CreateEcosystemRequest createEcosystemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEcosystemRequest' is set
        if (createEcosystemRequest == null) {
            throw new ApiException("Missing the required parameter 'createEcosystemRequest' when calling createEcosystem(Async)");
        }

        return createEcosystemCall(createEcosystemRequest, _callback);

    }

    /**
     * Create ecosystem
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * @param createEcosystemRequest  (required)
     * @return EcosystemModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new ecosystem. Returns an ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public EcosystemModel createEcosystem(CreateEcosystemRequest createEcosystemRequest) throws ApiException {
        ApiResponse<EcosystemModel> localVarResp = createEcosystemWithHttpInfo(createEcosystemRequest);
        return localVarResp.getData();
    }

    /**
     * Create ecosystem
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * @param createEcosystemRequest  (required)
     * @return ApiResponse&lt;EcosystemModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new ecosystem. Returns an ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EcosystemModel> createEcosystemWithHttpInfo(CreateEcosystemRequest createEcosystemRequest) throws ApiException {
        okhttp3.Call localVarCall = createEcosystemValidateBeforeCall(createEcosystemRequest, null);
        Type localVarReturnType = new TypeToken<EcosystemModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create ecosystem (asynchronously)
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * @param createEcosystemRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new ecosystem. Returns an ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEcosystemAsync(CreateEcosystemRequest createEcosystemRequest, final ApiCallback<EcosystemModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEcosystemValidateBeforeCall(createEcosystemRequest, _callback);
        Type localVarReturnType = new TypeToken<EcosystemModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProfile
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param createProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new profile. Returns a profile object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProfileCall(String xEcosystemKey, CreateProfileRequest createProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProfileRequest;

        // create path and map variables
        String localVarPath = "/v1/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xEcosystemKey != null) {
            localVarHeaderParams.put("X-Ecosystem-Key", localVarApiClient.parameterToString(xEcosystemKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProfileValidateBeforeCall(String xEcosystemKey, CreateProfileRequest createProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xEcosystemKey' is set
        if (xEcosystemKey == null) {
            throw new ApiException("Missing the required parameter 'xEcosystemKey' when calling createProfile(Async)");
        }

        // verify the required parameter 'createProfileRequest' is set
        if (createProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'createProfileRequest' when calling createProfile(Async)");
        }

        return createProfileCall(xEcosystemKey, createProfileRequest, _callback);

    }

    /**
     * Create profile
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param createProfileRequest  (required)
     * @return AuthProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new profile. Returns a profile object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public AuthProfile200Response createProfile(String xEcosystemKey, CreateProfileRequest createProfileRequest) throws ApiException {
        ApiResponse<AuthProfile200Response> localVarResp = createProfileWithHttpInfo(xEcosystemKey, createProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Create profile
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param createProfileRequest  (required)
     * @return ApiResponse&lt;AuthProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new profile. Returns a profile object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthProfile200Response> createProfileWithHttpInfo(String xEcosystemKey, CreateProfileRequest createProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = createProfileValidateBeforeCall(xEcosystemKey, createProfileRequest, null);
        Type localVarReturnType = new TypeToken<AuthProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create profile (asynchronously)
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param createProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new profile. Returns a profile object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProfileAsync(String xEcosystemKey, CreateProfileRequest createProfileRequest, final ApiCallback<AuthProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProfileValidateBeforeCall(xEcosystemKey, createProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProfilePlayer
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param createProfilePlayerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player linked to the authenticating profile. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProfilePlayerCall(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProfilePlayerRequest;

        // create path and map variables
        String localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProfilePlayerValidateBeforeCall(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling createProfilePlayer(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling createProfilePlayer(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createProfilePlayer(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling createProfilePlayer(Async)");
        }

        // verify the required parameter 'createProfilePlayerRequest' is set
        if (createProfilePlayerRequest == null) {
            throw new ApiException("Missing the required parameter 'createProfilePlayerRequest' when calling createProfilePlayer(Async)");
        }

        return createProfilePlayerCall(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest, _callback);

    }

    /**
     * Create profile player
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param createProfilePlayerRequest  (required)
     * @return AuthPlayer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player linked to the authenticating profile. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public AuthPlayer200Response createProfilePlayer(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest) throws ApiException {
        ApiResponse<AuthPlayer200Response> localVarResp = createProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest);
        return localVarResp.getData();
    }

    /**
     * Create profile player
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param createProfilePlayerRequest  (required)
     * @return ApiResponse&lt;AuthPlayer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player linked to the authenticating profile. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthPlayer200Response> createProfilePlayerWithHttpInfo(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest) throws ApiException {
        okhttp3.Call localVarCall = createProfilePlayerValidateBeforeCall(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest, null);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create profile player (asynchronously)
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param createProfilePlayerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player linked to the authenticating profile. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProfilePlayerAsync(String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, final ApiCallback<AuthPlayer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProfilePlayerValidateBeforeCall(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEcosystem
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEcosystemCall(String ecosystemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/{ecosystemId}"
            .replace("{" + "ecosystemId" + "}", localVarApiClient.escapeString(ecosystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEcosystemValidateBeforeCall(String ecosystemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling getEcosystem(Async)");
        }

        return getEcosystemCall(ecosystemId, _callback);

    }

    /**
     * Get ecosystem
     * Returns a ecosystem object for the provided ecosystem id.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @return PublicEcosystem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public PublicEcosystem getEcosystem(String ecosystemId) throws ApiException {
        ApiResponse<PublicEcosystem> localVarResp = getEcosystemWithHttpInfo(ecosystemId);
        return localVarResp.getData();
    }

    /**
     * Get ecosystem
     * Returns a ecosystem object for the provided ecosystem id.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @return ApiResponse&lt;PublicEcosystem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicEcosystem> getEcosystemWithHttpInfo(String ecosystemId) throws ApiException {
        okhttp3.Call localVarCall = getEcosystemValidateBeforeCall(ecosystemId, null);
        Type localVarReturnType = new TypeToken<PublicEcosystem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ecosystem (asynchronously)
     * Returns a ecosystem object for the provided ecosystem id.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEcosystemAsync(String ecosystemId, final ApiCallback<PublicEcosystem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEcosystemValidateBeforeCall(ecosystemId, _callback);
        Type localVarReturnType = new TypeToken<PublicEcosystem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEcosystemGame
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an approved game. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEcosystemGameCall(String ecosystemId, String gameId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/{ecosystemId}/games/{gameId}"
            .replace("{" + "ecosystemId" + "}", localVarApiClient.escapeString(ecosystemId.toString()))
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEcosystemGameValidateBeforeCall(String ecosystemId, String gameId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling getEcosystemGame(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getEcosystemGame(Async)");
        }

        return getEcosystemGameCall(ecosystemId, gameId, _callback);

    }

    /**
     * Get ecosystem game
     * Returns a game object for the provided game id that the ecosystem has approved.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @return PublicGame
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an approved game. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public PublicGame getEcosystemGame(String ecosystemId, String gameId) throws ApiException {
        ApiResponse<PublicGame> localVarResp = getEcosystemGameWithHttpInfo(ecosystemId, gameId);
        return localVarResp.getData();
    }

    /**
     * Get ecosystem game
     * Returns a game object for the provided game id that the ecosystem has approved.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @return ApiResponse&lt;PublicGame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an approved game. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicGame> getEcosystemGameWithHttpInfo(String ecosystemId, String gameId) throws ApiException {
        okhttp3.Call localVarCall = getEcosystemGameValidateBeforeCall(ecosystemId, gameId, null);
        Type localVarReturnType = new TypeToken<PublicGame>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ecosystem game (asynchronously)
     * Returns a game object for the provided game id that the ecosystem has approved.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an approved game. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEcosystemGameAsync(String ecosystemId, String gameId, final ApiCallback<PublicGame> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEcosystemGameValidateBeforeCall(ecosystemId, gameId, _callback);
        Type localVarReturnType = new TypeToken<PublicGame>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEcosystemGames
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of approved games. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEcosystemGamesCall(String ecosystemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/{ecosystemId}/games"
            .replace("{" + "ecosystemId" + "}", localVarApiClient.escapeString(ecosystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEcosystemGamesValidateBeforeCall(String ecosystemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling getEcosystemGames(Async)");
        }

        return getEcosystemGamesCall(ecosystemId, _callback);

    }

    /**
     * Get ecosystem games
     * Returns an array of games the ecosystem has approved.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @return List&lt;PublicGame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of approved games. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<PublicGame> getEcosystemGames(String ecosystemId) throws ApiException {
        ApiResponse<List<PublicGame>> localVarResp = getEcosystemGamesWithHttpInfo(ecosystemId);
        return localVarResp.getData();
    }

    /**
     * Get ecosystem games
     * Returns an array of games the ecosystem has approved.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @return ApiResponse&lt;List&lt;PublicGame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of approved games. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PublicGame>> getEcosystemGamesWithHttpInfo(String ecosystemId) throws ApiException {
        okhttp3.Call localVarCall = getEcosystemGamesValidateBeforeCall(ecosystemId, null);
        Type localVarReturnType = new TypeToken<List<PublicGame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ecosystem games (asynchronously)
     * Returns an array of games the ecosystem has approved.
     * @param ecosystemId Any ecosystem id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of approved games. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEcosystemGamesAsync(String ecosystemId, final ApiCallback<List<PublicGame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEcosystemGamesValidateBeforeCall(ecosystemId, _callback);
        Type localVarReturnType = new TypeToken<List<PublicGame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfileGame
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileGameCall(String profileId, String gameId, String xAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{profileId}/games/{gameId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileGameValidateBeforeCall(String profileId, String gameId, String xAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getProfileGame(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getProfileGame(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling getProfileGame(Async)");
        }

        return getProfileGameCall(profileId, gameId, xAuthorization, _callback);

    }

    /**
     * Get profile game
     * Returns a game this profile has connected player accounts for.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @return GetProfileGames200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public GetProfileGames200ResponseInner getProfileGame(String profileId, String gameId, String xAuthorization) throws ApiException {
        ApiResponse<GetProfileGames200ResponseInner> localVarResp = getProfileGameWithHttpInfo(profileId, gameId, xAuthorization);
        return localVarResp.getData();
    }

    /**
     * Get profile game
     * Returns a game this profile has connected player accounts for.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @return ApiResponse&lt;GetProfileGames200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProfileGames200ResponseInner> getProfileGameWithHttpInfo(String profileId, String gameId, String xAuthorization) throws ApiException {
        okhttp3.Call localVarCall = getProfileGameValidateBeforeCall(profileId, gameId, xAuthorization, null);
        Type localVarReturnType = new TypeToken<GetProfileGames200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get profile game (asynchronously)
     * Returns a game this profile has connected player accounts for.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileGameAsync(String profileId, String gameId, String xAuthorization, final ApiCallback<GetProfileGames200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileGameValidateBeforeCall(profileId, gameId, xAuthorization, _callback);
        Type localVarReturnType = new TypeToken<GetProfileGames200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfileGames
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileGamesCall(String profileId, String xAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/profiles/{profileId}/games"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileGamesValidateBeforeCall(String profileId, String xAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getProfileGames(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling getProfileGames(Async)");
        }

        return getProfileGamesCall(profileId, xAuthorization, _callback);

    }

    /**
     * Get profile games
     * Returns an array of games the authorized profile has connected player accounts for.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @return List&lt;GetProfileGames200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetProfileGames200ResponseInner> getProfileGames(String profileId, String xAuthorization) throws ApiException {
        ApiResponse<List<GetProfileGames200ResponseInner>> localVarResp = getProfileGamesWithHttpInfo(profileId, xAuthorization);
        return localVarResp.getData();
    }

    /**
     * Get profile games
     * Returns an array of games the authorized profile has connected player accounts for.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @return ApiResponse&lt;List&lt;GetProfileGames200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetProfileGames200ResponseInner>> getProfileGamesWithHttpInfo(String profileId, String xAuthorization) throws ApiException {
        okhttp3.Call localVarCall = getProfileGamesValidateBeforeCall(profileId, xAuthorization, null);
        Type localVarReturnType = new TypeToken<List<GetProfileGames200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get profile games (asynchronously)
     * Returns an array of games the authorized profile has connected player accounts for.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved array of games this profile has connected player accounts for. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileGamesAsync(String profileId, String xAuthorization, final ApiCallback<List<GetProfileGames200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileGamesValidateBeforeCall(profileId, xAuthorization, _callback);
        Type localVarReturnType = new TypeToken<List<GetProfileGames200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unapproveEcosystemGame
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unapproveEcosystemGameCall(String ecosystemId, String gameId, String xAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/{ecosystemId}/games/{gameId}"
            .replace("{" + "ecosystemId" + "}", localVarApiClient.escapeString(ecosystemId.toString()))
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unapproveEcosystemGameValidateBeforeCall(String ecosystemId, String gameId, String xAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling unapproveEcosystemGame(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling unapproveEcosystemGame(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling unapproveEcosystemGame(Async)");
        }

        return unapproveEcosystemGameCall(ecosystemId, gameId, xAuthorization, _callback);

    }

    /**
     * Unapprove ecosystem game
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public void unapproveEcosystemGame(String ecosystemId, String gameId, String xAuthorization) throws ApiException {
        unapproveEcosystemGameWithHttpInfo(ecosystemId, gameId, xAuthorization);
    }

    /**
     * Unapprove ecosystem game
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unapproveEcosystemGameWithHttpInfo(String ecosystemId, String gameId, String xAuthorization) throws ApiException {
        okhttp3.Call localVarCall = unapproveEcosystemGameValidateBeforeCall(ecosystemId, gameId, xAuthorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unapprove ecosystem game (asynchronously)
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully approved the game for the ecosystem. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unapproveEcosystemGameAsync(String ecosystemId, String gameId, String xAuthorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unapproveEcosystemGameValidateBeforeCall(ecosystemId, gameId, xAuthorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEcosystem
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param updateEcosystemRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEcosystemCall(String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEcosystemRequest;

        // create path and map variables
        String localVarPath = "/v1/ecosystems/{ecosystemId}"
            .replace("{" + "ecosystemId" + "}", localVarApiClient.escapeString(ecosystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEcosystemValidateBeforeCall(String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemId' is set
        if (ecosystemId == null) {
            throw new ApiException("Missing the required parameter 'ecosystemId' when calling updateEcosystem(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling updateEcosystem(Async)");
        }

        // verify the required parameter 'updateEcosystemRequest' is set
        if (updateEcosystemRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEcosystemRequest' when calling updateEcosystem(Async)");
        }

        return updateEcosystemCall(ecosystemId, xAuthorization, updateEcosystemRequest, _callback);

    }

    /**
     * Update ecosystem
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param updateEcosystemRequest  (required)
     * @return EcosystemModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public EcosystemModel updateEcosystem(String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest) throws ApiException {
        ApiResponse<EcosystemModel> localVarResp = updateEcosystemWithHttpInfo(ecosystemId, xAuthorization, updateEcosystemRequest);
        return localVarResp.getData();
    }

    /**
     * Update ecosystem
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param updateEcosystemRequest  (required)
     * @return ApiResponse&lt;EcosystemModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EcosystemModel> updateEcosystemWithHttpInfo(String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEcosystemValidateBeforeCall(ecosystemId, xAuthorization, updateEcosystemRequest, null);
        Type localVarReturnType = new TypeToken<EcosystemModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update ecosystem (asynchronously)
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * @param ecosystemId The ecosystem id of the authenticating ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param updateEcosystemRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated ecosystem object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEcosystemAsync(String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, final ApiCallback<EcosystemModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEcosystemValidateBeforeCall(ecosystemId, xAuthorization, updateEcosystemRequest, _callback);
        Type localVarReturnType = new TypeToken<EcosystemModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProfile
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param updateProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated profile object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileCall(String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfileRequest;

        // create path and map variables
        String localVarPath = "/v1/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileValidateBeforeCall(String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateProfile(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling updateProfile(Async)");
        }

        // verify the required parameter 'updateProfileRequest' is set
        if (updateProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'updateProfileRequest' when calling updateProfile(Async)");
        }

        return updateProfileCall(profileId, xAuthorization, updateProfileRequest, _callback);

    }

    /**
     * Update profile
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param updateProfileRequest  (required)
     * @return ProfileModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated profile object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileModel updateProfile(String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest) throws ApiException {
        ApiResponse<ProfileModel> localVarResp = updateProfileWithHttpInfo(profileId, xAuthorization, updateProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update profile
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param updateProfileRequest  (required)
     * @return ApiResponse&lt;ProfileModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated profile object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileModel> updateProfileWithHttpInfo(String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(profileId, xAuthorization, updateProfileRequest, null);
        Type localVarReturnType = new TypeToken<ProfileModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update profile (asynchronously)
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param updateProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated profile object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileAsync(String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest, final ApiCallback<ProfileModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(profileId, xAuthorization, updateProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<ProfileModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProfilePlayer
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param playerId Any player id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param updateProfilePlayerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the player. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfilePlayerCall(String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfilePlayerRequest;

        // create path and map variables
        String localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players/{playerId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "gameId" + "}", localVarApiClient.escapeString(gameId.toString()))
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfilePlayerValidateBeforeCall(String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateProfilePlayer(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling updateProfilePlayer(Async)");
        }

        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling updateProfilePlayer(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling updateProfilePlayer(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling updateProfilePlayer(Async)");
        }

        // verify the required parameter 'updateProfilePlayerRequest' is set
        if (updateProfilePlayerRequest == null) {
            throw new ApiException("Missing the required parameter 'updateProfilePlayerRequest' when calling updateProfilePlayer(Async)");
        }

        return updateProfilePlayerCall(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest, _callback);

    }

    /**
     * Update profile player
     * Update various fields specific to a player. Such as changing its permissions.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param playerId Any player id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param updateProfilePlayerRequest  (required)
     * @return UpdateProfilePlayer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the player. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProfilePlayer200Response updateProfilePlayer(String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest) throws ApiException {
        ApiResponse<UpdateProfilePlayer200Response> localVarResp = updateProfilePlayerWithHttpInfo(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest);
        return localVarResp.getData();
    }

    /**
     * Update profile player
     * Update various fields specific to a player. Such as changing its permissions.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param playerId Any player id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param updateProfilePlayerRequest  (required)
     * @return ApiResponse&lt;UpdateProfilePlayer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the player. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateProfilePlayer200Response> updateProfilePlayerWithHttpInfo(String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProfilePlayerValidateBeforeCall(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest, null);
        Type localVarReturnType = new TypeToken<UpdateProfilePlayer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update profile player (asynchronously)
     * Update various fields specific to a player. Such as changing its permissions.
     * @param profileId The profile id of the authenticating profile. (required)
     * @param gameId Any game id within the MetaFab platform. (required)
     * @param playerId Any player id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param updateProfilePlayerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the player. Returns a player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfilePlayerAsync(String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, final ApiCallback<UpdateProfilePlayer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfilePlayerValidateBeforeCall(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateProfilePlayer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
