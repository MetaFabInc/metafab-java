/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateExchange200Response;
import org.openapitools.client.model.CreateExchangeRequest;
import org.openapitools.client.model.ExchangeOffer;
import org.openapitools.client.model.GetExchanges200ResponseInner;
import org.openapitools.client.model.SetExchangeOfferRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.WithdrawFromExchangeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExchangesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExchangesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createExchange
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createExchangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new exchange and deployed its contract on the chain specified. Returns a exchange object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExchangeCall(String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createExchangeRequest;

        // create path and map variables
        String localVarPath = "/v1/exchanges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExchangeValidateBeforeCall(String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createExchange(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling createExchange(Async)");
        }
        
        // verify the required parameter 'createExchangeRequest' is set
        if (createExchangeRequest == null) {
            throw new ApiException("Missing the required parameter 'createExchangeRequest' when calling createExchange(Async)");
        }
        

        okhttp3.Call localVarCall = createExchangeCall(xAuthorization, xPassword, createExchangeRequest, _callback);
        return localVarCall;

    }

    /**
     * Create exchange
     * Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game&#39;s primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createExchangeRequest  (required)
     * @return CreateExchange200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new exchange and deployed its contract on the chain specified. Returns a exchange object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public CreateExchange200Response createExchange(String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest) throws ApiException {
        ApiResponse<CreateExchange200Response> localVarResp = createExchangeWithHttpInfo(xAuthorization, xPassword, createExchangeRequest);
        return localVarResp.getData();
    }

    /**
     * Create exchange
     * Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game&#39;s primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createExchangeRequest  (required)
     * @return ApiResponse&lt;CreateExchange200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new exchange and deployed its contract on the chain specified. Returns a exchange object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateExchange200Response> createExchangeWithHttpInfo(String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest) throws ApiException {
        okhttp3.Call localVarCall = createExchangeValidateBeforeCall(xAuthorization, xPassword, createExchangeRequest, null);
        Type localVarReturnType = new TypeToken<CreateExchange200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create exchange (asynchronously)
     * Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game&#39;s primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createExchangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new exchange and deployed its contract on the chain specified. Returns a exchange object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExchangeAsync(String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest, final ApiCallback<CreateExchange200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExchangeValidateBeforeCall(xAuthorization, xPassword, createExchangeRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateExchange200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExchangeOffer
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeOfferCall(String exchangeId, String exchangeOfferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchangeId}/items/{exchangeOfferId}"
            .replaceAll("\\{" + "exchangeId" + "\\}", localVarApiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "exchangeOfferId" + "\\}", localVarApiClient.escapeString(exchangeOfferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExchangeOfferValidateBeforeCall(String exchangeId, String exchangeOfferId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeOffer(Async)");
        }
        
        // verify the required parameter 'exchangeOfferId' is set
        if (exchangeOfferId == null) {
            throw new ApiException("Missing the required parameter 'exchangeOfferId' when calling getExchangeOffer(Async)");
        }
        

        okhttp3.Call localVarCall = getExchangeOfferCall(exchangeId, exchangeOfferId, _callback);
        return localVarCall;

    }

    /**
     * Get exchange offer
     * Returns a exchange offer object for the provided exchangeOfferId.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @return ExchangeOffer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ExchangeOffer getExchangeOffer(String exchangeId, String exchangeOfferId) throws ApiException {
        ApiResponse<ExchangeOffer> localVarResp = getExchangeOfferWithHttpInfo(exchangeId, exchangeOfferId);
        return localVarResp.getData();
    }

    /**
     * Get exchange offer
     * Returns a exchange offer object for the provided exchangeOfferId.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @return ApiResponse&lt;ExchangeOffer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExchangeOffer> getExchangeOfferWithHttpInfo(String exchangeId, String exchangeOfferId) throws ApiException {
        okhttp3.Call localVarCall = getExchangeOfferValidateBeforeCall(exchangeId, exchangeOfferId, null);
        Type localVarReturnType = new TypeToken<ExchangeOffer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get exchange offer (asynchronously)
     * Returns a exchange offer object for the provided exchangeOfferId.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeOfferAsync(String exchangeId, String exchangeOfferId, final ApiCallback<ExchangeOffer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExchangeOfferValidateBeforeCall(exchangeId, exchangeOfferId, _callback);
        Type localVarReturnType = new TypeToken<ExchangeOffer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExchangeOffers
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeOffersCall(String exchangeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchangeId}/offers"
            .replaceAll("\\{" + "exchangeId" + "\\}", localVarApiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExchangeOffersValidateBeforeCall(String exchangeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling getExchangeOffers(Async)");
        }
        

        okhttp3.Call localVarCall = getExchangeOffersCall(exchangeId, _callback);
        return localVarCall;

    }

    /**
     * Get exchange offers
     * Returns all exchange offers as an array of exchange offer objects.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @return List&lt;ExchangeOffer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<ExchangeOffer> getExchangeOffers(String exchangeId) throws ApiException {
        ApiResponse<List<ExchangeOffer>> localVarResp = getExchangeOffersWithHttpInfo(exchangeId);
        return localVarResp.getData();
    }

    /**
     * Get exchange offers
     * Returns all exchange offers as an array of exchange offer objects.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @return ApiResponse&lt;List&lt;ExchangeOffer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExchangeOffer>> getExchangeOffersWithHttpInfo(String exchangeId) throws ApiException {
        okhttp3.Call localVarCall = getExchangeOffersValidateBeforeCall(exchangeId, null);
        Type localVarReturnType = new TypeToken<List<ExchangeOffer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get exchange offers (asynchronously)
     * Returns all exchange offers as an array of exchange offer objects.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved exchange offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeOffersAsync(String exchangeId, final ApiCallback<List<ExchangeOffer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExchangeOffersValidateBeforeCall(exchangeId, _callback);
        Type localVarReturnType = new TypeToken<List<ExchangeOffer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExchanges
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of exchanges for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangesCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchanges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExchangesValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling getExchanges(Async)");
        }
        

        okhttp3.Call localVarCall = getExchangesCall(xGameKey, _callback);
        return localVarCall;

    }

    /**
     * Get exchanges
     * Returns an array of active exchanges for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return List&lt;GetExchanges200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of exchanges for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetExchanges200ResponseInner> getExchanges(String xGameKey) throws ApiException {
        ApiResponse<List<GetExchanges200ResponseInner>> localVarResp = getExchangesWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Get exchanges
     * Returns an array of active exchanges for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;List&lt;GetExchanges200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of exchanges for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetExchanges200ResponseInner>> getExchangesWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = getExchangesValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<List<GetExchanges200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get exchanges (asynchronously)
     * Returns an array of active exchanges for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of exchanges for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangesAsync(String xGameKey, final ApiCallback<List<GetExchanges200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExchangesValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<List<GetExchanges200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeExchangeOffer
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided exchange. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeExchangeOfferCall(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}"
            .replaceAll("\\{" + "exchangeId" + "\\}", localVarApiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "exchangeOfferId" + "\\}", localVarApiClient.escapeString(exchangeOfferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExchangeOfferValidateBeforeCall(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling removeExchangeOffer(Async)");
        }
        
        // verify the required parameter 'exchangeOfferId' is set
        if (exchangeOfferId == null) {
            throw new ApiException("Missing the required parameter 'exchangeOfferId' when calling removeExchangeOffer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling removeExchangeOffer(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling removeExchangeOffer(Async)");
        }
        

        okhttp3.Call localVarCall = removeExchangeOfferCall(exchangeId, exchangeOfferId, xAuthorization, xPassword, _callback);
        return localVarCall;

    }

    /**
     * Remove exchange offer
     * Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided exchange. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel removeExchangeOffer(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = removeExchangeOfferWithHttpInfo(exchangeId, exchangeOfferId, xAuthorization, xPassword);
        return localVarResp.getData();
    }

    /**
     * Remove exchange offer
     * Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided exchange. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> removeExchangeOfferWithHttpInfo(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword) throws ApiException {
        okhttp3.Call localVarCall = removeExchangeOfferValidateBeforeCall(exchangeId, exchangeOfferId, xAuthorization, xPassword, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove exchange offer (asynchronously)
     * Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided exchange. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeExchangeOfferAsync(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExchangeOfferValidateBeforeCall(exchangeId, exchangeOfferId, xAuthorization, xPassword, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setExchangeOffer
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setExchangeOfferRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an exchange offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setExchangeOfferCall(String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setExchangeOfferRequest;

        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchangeId}/offers"
            .replaceAll("\\{" + "exchangeId" + "\\}", localVarApiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setExchangeOfferValidateBeforeCall(String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling setExchangeOffer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setExchangeOffer(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling setExchangeOffer(Async)");
        }
        
        // verify the required parameter 'setExchangeOfferRequest' is set
        if (setExchangeOfferRequest == null) {
            throw new ApiException("Missing the required parameter 'setExchangeOfferRequest' when calling setExchangeOffer(Async)");
        }
        

        okhttp3.Call localVarCall = setExchangeOfferCall(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest, _callback);
        return localVarCall;

    }

    /**
     * Set exchange offer
     * Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setExchangeOfferRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an exchange offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel setExchangeOffer(String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = setExchangeOfferWithHttpInfo(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest);
        return localVarResp.getData();
    }

    /**
     * Set exchange offer
     * Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setExchangeOfferRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an exchange offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> setExchangeOfferWithHttpInfo(String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest) throws ApiException {
        okhttp3.Call localVarCall = setExchangeOfferValidateBeforeCall(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set exchange offer (asynchronously)
     * Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setExchangeOfferRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an exchange offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setExchangeOfferAsync(String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setExchangeOfferValidateBeforeCall(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for useExchangeOffer
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided exchange offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useExchangeOfferCall(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses"
            .replaceAll("\\{" + "exchangeId" + "\\}", localVarApiClient.escapeString(exchangeId.toString()))
            .replaceAll("\\{" + "exchangeOfferId" + "\\}", localVarApiClient.escapeString(exchangeOfferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call useExchangeOfferValidateBeforeCall(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling useExchangeOffer(Async)");
        }
        
        // verify the required parameter 'exchangeOfferId' is set
        if (exchangeOfferId == null) {
            throw new ApiException("Missing the required parameter 'exchangeOfferId' when calling useExchangeOffer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling useExchangeOffer(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling useExchangeOffer(Async)");
        }
        

        okhttp3.Call localVarCall = useExchangeOfferCall(exchangeId, exchangeOfferId, xAuthorization, xPassword, _callback);
        return localVarCall;

    }

    /**
     * Use exchange offer
     * Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided exchange offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel useExchangeOffer(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = useExchangeOfferWithHttpInfo(exchangeId, exchangeOfferId, xAuthorization, xPassword);
        return localVarResp.getData();
    }

    /**
     * Use exchange offer
     * Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided exchange offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> useExchangeOfferWithHttpInfo(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword) throws ApiException {
        okhttp3.Call localVarCall = useExchangeOfferValidateBeforeCall(exchangeId, exchangeOfferId, xAuthorization, xPassword, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use exchange offer (asynchronously)
     * Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided exchange offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useExchangeOfferAsync(String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = useExchangeOfferValidateBeforeCall(exchangeId, exchangeOfferId, xAuthorization, xPassword, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawFromExchange
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromExchangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawFromExchangeCall(String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = withdrawFromExchangeRequest;

        // create path and map variables
        String localVarPath = "/v1/exchanges/{exchangeId}/withdrawals"
            .replaceAll("\\{" + "exchangeId" + "\\}", localVarApiClient.escapeString(exchangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawFromExchangeValidateBeforeCall(String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling withdrawFromExchange(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling withdrawFromExchange(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling withdrawFromExchange(Async)");
        }
        
        // verify the required parameter 'withdrawFromExchangeRequest' is set
        if (withdrawFromExchangeRequest == null) {
            throw new ApiException("Missing the required parameter 'withdrawFromExchangeRequest' when calling withdrawFromExchange(Async)");
        }
        

        okhttp3.Call localVarCall = withdrawFromExchangeCall(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest, _callback);
        return localVarCall;

    }

    /**
     * Withdraw from exchange
     * Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromExchangeRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel withdrawFromExchange(String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = withdrawFromExchangeWithHttpInfo(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest);
        return localVarResp.getData();
    }

    /**
     * Withdraw from exchange
     * Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromExchangeRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> withdrawFromExchangeWithHttpInfo(String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest) throws ApiException {
        okhttp3.Call localVarCall = withdrawFromExchangeValidateBeforeCall(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Withdraw from exchange (asynchronously)
     * Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
     * @param exchangeId Any exchange id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromExchangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawFromExchangeAsync(String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawFromExchangeValidateBeforeCall(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
