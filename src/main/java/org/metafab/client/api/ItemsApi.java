/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchMintCollectionItemsRequest;
import org.openapitools.client.model.BatchTransferCollectionItemsRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.BurnCollectionItemRequest;
import org.openapitools.client.model.CollectionItem;
import org.openapitools.client.model.CreateCollection200Response;
import org.openapitools.client.model.CreateCollectionItemRequest;
import org.openapitools.client.model.CreateCollectionRequest;
import org.openapitools.client.model.GetCollections200ResponseInner;
import org.openapitools.client.model.GrantCollectionRoleRequest;
import org.openapitools.client.model.MintCollectionItemRequest;
import org.openapitools.client.model.RevokeCollectionRoleRequest;
import org.openapitools.client.model.SetCollectionApprovalRequest;
import org.openapitools.client.model.SetCollectionItemTimelockRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.TransferCollectionItemRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchMintCollectionItems
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param batchMintCollectionItemsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the provided items of the provided quantities to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchMintCollectionItemsCall(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchMintCollectionItemsRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/batchMints"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchMintCollectionItemsValidateBeforeCall(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling batchMintCollectionItems(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling batchMintCollectionItems(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling batchMintCollectionItems(Async)");
        }

        // verify the required parameter 'batchMintCollectionItemsRequest' is set
        if (batchMintCollectionItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchMintCollectionItemsRequest' when calling batchMintCollectionItems(Async)");
        }

        return batchMintCollectionItemsCall(collectionId, xAuthorization, xWalletDecryptKey, batchMintCollectionItemsRequest, _callback);

    }

    /**
     * Batch mint collection items
     * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param batchMintCollectionItemsRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the provided items of the provided quantities to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel batchMintCollectionItems(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = batchMintCollectionItemsWithHttpInfo(collectionId, xAuthorization, xWalletDecryptKey, batchMintCollectionItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Batch mint collection items
     * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param batchMintCollectionItemsRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the provided items of the provided quantities to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> batchMintCollectionItemsWithHttpInfo(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchMintCollectionItemsValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, batchMintCollectionItemsRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch mint collection items (asynchronously)
     * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param batchMintCollectionItemsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the provided items of the provided quantities to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchMintCollectionItemsAsync(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchMintCollectionItemsValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, batchMintCollectionItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchTransferCollectionItems
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCollectionItemsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the itemIds of the provided quantities to each of the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchTransferCollectionItemsCall(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchTransferCollectionItemsRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/batchTransfers"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchTransferCollectionItemsValidateBeforeCall(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling batchTransferCollectionItems(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling batchTransferCollectionItems(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling batchTransferCollectionItems(Async)");
        }

        // verify the required parameter 'batchTransferCollectionItemsRequest' is set
        if (batchTransferCollectionItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchTransferCollectionItemsRequest' when calling batchTransferCollectionItems(Async)");
        }

        return batchTransferCollectionItemsCall(collectionId, xAuthorization, xWalletDecryptKey, batchTransferCollectionItemsRequest, _callback);

    }

    /**
     * Batch transfer collection items
     * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCollectionItemsRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the itemIds of the provided quantities to each of the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel batchTransferCollectionItems(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = batchTransferCollectionItemsWithHttpInfo(collectionId, xAuthorization, xWalletDecryptKey, batchTransferCollectionItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Batch transfer collection items
     * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCollectionItemsRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the itemIds of the provided quantities to each of the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> batchTransferCollectionItemsWithHttpInfo(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchTransferCollectionItemsValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, batchTransferCollectionItemsRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch transfer collection items (asynchronously)
     * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCollectionItemsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the itemIds of the provided quantities to each of the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchTransferCollectionItemsAsync(String collectionId, String xAuthorization, String xWalletDecryptKey, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchTransferCollectionItemsValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, batchTransferCollectionItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for burnCollectionItem
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCollectionItemRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the quantity of the collectionItemId from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call burnCollectionItemCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, BurnCollectionItemRequest burnCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = burnCollectionItemRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/burns"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call burnCollectionItemValidateBeforeCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, BurnCollectionItemRequest burnCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling burnCollectionItem(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling burnCollectionItem(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling burnCollectionItem(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling burnCollectionItem(Async)");
        }

        // verify the required parameter 'burnCollectionItemRequest' is set
        if (burnCollectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'burnCollectionItemRequest' when calling burnCollectionItem(Async)");
        }

        return burnCollectionItemCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, burnCollectionItemRequest, _callback);

    }

    /**
     * Burn collection item
     * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCollectionItemRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the quantity of the collectionItemId from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel burnCollectionItem(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, BurnCollectionItemRequest burnCollectionItemRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = burnCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, burnCollectionItemRequest);
        return localVarResp.getData();
    }

    /**
     * Burn collection item
     * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCollectionItemRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the quantity of the collectionItemId from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> burnCollectionItemWithHttpInfo(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, BurnCollectionItemRequest burnCollectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = burnCollectionItemValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, burnCollectionItemRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Burn collection item (asynchronously)
     * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCollectionItemRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the quantity of the collectionItemId from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call burnCollectionItemAsync(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, BurnCollectionItemRequest burnCollectionItemRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = burnCollectionItemValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, burnCollectionItemRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCollection
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item collection and deployed its associated ERC1155 contract on the chain specified. Returns a collection object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionCall(String xAuthorization, String xWalletDecryptKey, CreateCollectionRequest createCollectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCollectionRequest;

        // create path and map variables
        String localVarPath = "/v1/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionValidateBeforeCall(String xAuthorization, String xWalletDecryptKey, CreateCollectionRequest createCollectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createCollection(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling createCollection(Async)");
        }

        // verify the required parameter 'createCollectionRequest' is set
        if (createCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'createCollectionRequest' when calling createCollection(Async)");
        }

        return createCollectionCall(xAuthorization, xWalletDecryptKey, createCollectionRequest, _callback);

    }

    /**
     * Create collection
     * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionRequest  (required)
     * @return CreateCollection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item collection and deployed its associated ERC1155 contract on the chain specified. Returns a collection object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCollection200Response createCollection(String xAuthorization, String xWalletDecryptKey, CreateCollectionRequest createCollectionRequest) throws ApiException {
        ApiResponse<CreateCollection200Response> localVarResp = createCollectionWithHttpInfo(xAuthorization, xWalletDecryptKey, createCollectionRequest);
        return localVarResp.getData();
    }

    /**
     * Create collection
     * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionRequest  (required)
     * @return ApiResponse&lt;CreateCollection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item collection and deployed its associated ERC1155 contract on the chain specified. Returns a collection object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCollection200Response> createCollectionWithHttpInfo(String xAuthorization, String xWalletDecryptKey, CreateCollectionRequest createCollectionRequest) throws ApiException {
        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(xAuthorization, xWalletDecryptKey, createCollectionRequest, null);
        Type localVarReturnType = new TypeToken<CreateCollection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create collection (asynchronously)
     * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item collection and deployed its associated ERC1155 contract on the chain specified. Returns a collection object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionAsync(String xAuthorization, String xWalletDecryptKey, CreateCollectionRequest createCollectionRequest, final ApiCallback<CreateCollection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(xAuthorization, xWalletDecryptKey, createCollectionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCollection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCollectionItem
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionItemRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item type and assigned it to the provided item &#x60;id&#x60;. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionItemCall(String collectionId, String xAuthorization, String xWalletDecryptKey, CreateCollectionItemRequest createCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCollectionItemRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionItemValidateBeforeCall(String collectionId, String xAuthorization, String xWalletDecryptKey, CreateCollectionItemRequest createCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling createCollectionItem(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createCollectionItem(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling createCollectionItem(Async)");
        }

        // verify the required parameter 'createCollectionItemRequest' is set
        if (createCollectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'createCollectionItemRequest' when calling createCollectionItem(Async)");
        }

        return createCollectionItemCall(collectionId, xAuthorization, xWalletDecryptKey, createCollectionItemRequest, _callback);

    }

    /**
     * Create collection item
     * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionItemRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item type and assigned it to the provided item &#x60;id&#x60;. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel createCollectionItem(String collectionId, String xAuthorization, String xWalletDecryptKey, CreateCollectionItemRequest createCollectionItemRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = createCollectionItemWithHttpInfo(collectionId, xAuthorization, xWalletDecryptKey, createCollectionItemRequest);
        return localVarResp.getData();
    }

    /**
     * Create collection item
     * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionItemRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item type and assigned it to the provided item &#x60;id&#x60;. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> createCollectionItemWithHttpInfo(String collectionId, String xAuthorization, String xWalletDecryptKey, CreateCollectionItemRequest createCollectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = createCollectionItemValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, createCollectionItemRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create collection item (asynchronously)
     * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCollectionItemRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new item type and assigned it to the provided item &#x60;id&#x60;. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionItemAsync(String collectionId, String xAuthorization, String xWalletDecryptKey, CreateCollectionItemRequest createCollectionItemRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionItemValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, createCollectionItemRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionApproval
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param operatorAddress A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided operatorAddress can transfer and burn owned items by the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionApprovalCall(String collectionId, String operatorAddress, String address, String walletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/approvals"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operatorAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operatorAddress", operatorAddress));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionApprovalValidateBeforeCall(String collectionId, String operatorAddress, String address, String walletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionApproval(Async)");
        }

        // verify the required parameter 'operatorAddress' is set
        if (operatorAddress == null) {
            throw new ApiException("Missing the required parameter 'operatorAddress' when calling getCollectionApproval(Async)");
        }

        return getCollectionApprovalCall(collectionId, operatorAddress, address, walletId, _callback);

    }

    /**
     * Get collection approval
     * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param operatorAddress A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided operatorAddress can transfer and burn owned items by the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean getCollectionApproval(String collectionId, String operatorAddress, String address, String walletId) throws ApiException {
        ApiResponse<Boolean> localVarResp = getCollectionApprovalWithHttpInfo(collectionId, operatorAddress, address, walletId);
        return localVarResp.getData();
    }

    /**
     * Get collection approval
     * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param operatorAddress A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided operatorAddress can transfer and burn owned items by the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> getCollectionApprovalWithHttpInfo(String collectionId, String operatorAddress, String address, String walletId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionApprovalValidateBeforeCall(collectionId, operatorAddress, address, walletId, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection approval (asynchronously)
     * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param operatorAddress A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided operatorAddress can transfer and burn owned items by the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionApprovalAsync(String collectionId, String operatorAddress, String address, String walletId, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionApprovalValidateBeforeCall(collectionId, operatorAddress, address, walletId, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItem
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemCall(String collectionId, BigDecimal collectionItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemValidateBeforeCall(String collectionId, BigDecimal collectionItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItem(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling getCollectionItem(Async)");
        }

        return getCollectionItemCall(collectionId, collectionItemId, _callback);

    }

    /**
     * Get collection item
     * Returns a metadata object for the provided collectionItemId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @return CollectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public CollectionItem getCollectionItem(String collectionId, BigDecimal collectionItemId) throws ApiException {
        ApiResponse<CollectionItem> localVarResp = getCollectionItemWithHttpInfo(collectionId, collectionItemId);
        return localVarResp.getData();
    }

    /**
     * Get collection item
     * Returns a metadata object for the provided collectionItemId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @return ApiResponse&lt;CollectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionItem> getCollectionItemWithHttpInfo(String collectionId, BigDecimal collectionItemId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemValidateBeforeCall(collectionId, collectionItemId, null);
        Type localVarReturnType = new TypeToken<CollectionItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection item (asynchronously)
     * Returns a metadata object for the provided collectionItemId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemAsync(String collectionId, BigDecimal collectionItemId, final ApiCallback<CollectionItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemValidateBeforeCall(collectionId, collectionItemId, _callback);
        Type localVarReturnType = new TypeToken<CollectionItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItemBalance
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item balance of the provided collectionItemId for address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemBalanceCall(String collectionId, BigDecimal collectionItemId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/balances"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemBalanceValidateBeforeCall(String collectionId, BigDecimal collectionItemId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItemBalance(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling getCollectionItemBalance(Async)");
        }

        return getCollectionItemBalanceCall(collectionId, collectionItemId, address, walletId, _callback);

    }

    /**
     * Get collection item balance
     * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item balance of the provided collectionItemId for address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Integer getCollectionItemBalance(String collectionId, BigDecimal collectionItemId, String address, String walletId) throws ApiException {
        ApiResponse<Integer> localVarResp = getCollectionItemBalanceWithHttpInfo(collectionId, collectionItemId, address, walletId);
        return localVarResp.getData();
    }

    /**
     * Get collection item balance
     * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item balance of the provided collectionItemId for address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getCollectionItemBalanceWithHttpInfo(String collectionId, BigDecimal collectionItemId, String address, String walletId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemBalanceValidateBeforeCall(collectionId, collectionItemId, address, walletId, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection item balance (asynchronously)
     * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item balance of the provided collectionItemId for address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemBalanceAsync(String collectionId, BigDecimal collectionItemId, String address, String walletId, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemBalanceValidateBeforeCall(collectionId, collectionItemId, address, walletId, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItemBalances
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balances of all collection items owned by the provided address or walletId. Balances are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemBalancesCall(String collectionId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/balances"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemBalancesValidateBeforeCall(String collectionId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItemBalances(Async)");
        }

        return getCollectionItemBalancesCall(collectionId, address, walletId, _callback);

    }

    /**
     * Get collection item balances
     * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return Map&lt;String, Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balances of all collection items owned by the provided address or walletId. Balances are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Integer> getCollectionItemBalances(String collectionId, String address, String walletId) throws ApiException {
        ApiResponse<Map<String, Integer>> localVarResp = getCollectionItemBalancesWithHttpInfo(collectionId, address, walletId);
        return localVarResp.getData();
    }

    /**
     * Get collection item balances
     * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balances of all collection items owned by the provided address or walletId. Balances are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Integer>> getCollectionItemBalancesWithHttpInfo(String collectionId, String address, String walletId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemBalancesValidateBeforeCall(collectionId, address, walletId, null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection item balances (asynchronously)
     * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balances of all collection items owned by the provided address or walletId. Balances are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemBalancesAsync(String collectionId, String address, String walletId, final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemBalancesValidateBeforeCall(collectionId, address, walletId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItemSupplies
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the circulating supply of all collection items. Supplies are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemSuppliesCall(String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/supplies"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemSuppliesValidateBeforeCall(String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItemSupplies(Async)");
        }

        return getCollectionItemSuppliesCall(collectionId, _callback);

    }

    /**
     * Get collection item supplies
     * Returns the currency circulating supply of all collection items.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @return Map&lt;String, Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the circulating supply of all collection items. Supplies are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Integer> getCollectionItemSupplies(String collectionId) throws ApiException {
        ApiResponse<Map<String, Integer>> localVarResp = getCollectionItemSuppliesWithHttpInfo(collectionId);
        return localVarResp.getData();
    }

    /**
     * Get collection item supplies
     * Returns the currency circulating supply of all collection items.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the circulating supply of all collection items. Supplies are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Integer>> getCollectionItemSuppliesWithHttpInfo(String collectionId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemSuppliesValidateBeforeCall(collectionId, null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection item supplies (asynchronously)
     * Returns the currency circulating supply of all collection items.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the circulating supply of all collection items. Supplies are returned as a an object, mapping key value pairs as itemId -&gt; balance (string to handle uint256 numbers). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemSuppliesAsync(String collectionId, final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemSuppliesValidateBeforeCall(collectionId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItemSupply
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item supply. Supply is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemSupplyCall(String collectionId, BigDecimal collectionItemId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/supplies"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemSupplyValidateBeforeCall(String collectionId, BigDecimal collectionItemId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItemSupply(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling getCollectionItemSupply(Async)");
        }

        return getCollectionItemSupplyCall(collectionId, collectionItemId, address, walletId, _callback);

    }

    /**
     * Get collection item supply
     * Returns the current circulating supply of the provided collectionItemId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item supply. Supply is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Integer getCollectionItemSupply(String collectionId, BigDecimal collectionItemId, String address, String walletId) throws ApiException {
        ApiResponse<Integer> localVarResp = getCollectionItemSupplyWithHttpInfo(collectionId, collectionItemId, address, walletId);
        return localVarResp.getData();
    }

    /**
     * Get collection item supply
     * Returns the current circulating supply of the provided collectionItemId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item supply. Supply is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getCollectionItemSupplyWithHttpInfo(String collectionId, BigDecimal collectionItemId, String address, String walletId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemSupplyValidateBeforeCall(collectionId, collectionItemId, address, walletId, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection item supply (asynchronously)
     * Returns the current circulating supply of the provided collectionItemId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection item supply. Supply is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemSupplyAsync(String collectionId, BigDecimal collectionItemId, String address, String walletId, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemSupplyValidateBeforeCall(collectionId, collectionItemId, address, walletId, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItemTimelock
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the collectionItemId&#39;s timelock. The timelock is returned as a unix timestamp in seconds. A return value of 0 means the collectionItemId does not have a timelock set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemTimelockCall(String collectionId, BigDecimal collectionItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemTimelockValidateBeforeCall(String collectionId, BigDecimal collectionItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItemTimelock(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling getCollectionItemTimelock(Async)");
        }

        return getCollectionItemTimelockCall(collectionId, collectionItemId, _callback);

    }

    /**
     * Get collection item timelock
     * Returns a timestamp (in seconds) for when the provided collectionItemId&#39;s transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the collectionItemId&#39;s timelock. The timelock is returned as a unix timestamp in seconds. A return value of 0 means the collectionItemId does not have a timelock set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Integer getCollectionItemTimelock(String collectionId, BigDecimal collectionItemId) throws ApiException {
        ApiResponse<Integer> localVarResp = getCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId);
        return localVarResp.getData();
    }

    /**
     * Get collection item timelock
     * Returns a timestamp (in seconds) for when the provided collectionItemId&#39;s transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the collectionItemId&#39;s timelock. The timelock is returned as a unix timestamp in seconds. A return value of 0 means the collectionItemId does not have a timelock set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getCollectionItemTimelockWithHttpInfo(String collectionId, BigDecimal collectionItemId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemTimelockValidateBeforeCall(collectionId, collectionItemId, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection item timelock (asynchronously)
     * Returns a timestamp (in seconds) for when the provided collectionItemId&#39;s transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the collectionItemId&#39;s timelock. The timelock is returned as a unix timestamp in seconds. A return value of 0 means the collectionItemId does not have a timelock set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemTimelockAsync(String collectionId, BigDecimal collectionItemId, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemTimelockValidateBeforeCall(collectionId, collectionItemId, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionItems
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection items metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemsCall(String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemsValidateBeforeCall(String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionItems(Async)");
        }

        return getCollectionItemsCall(collectionId, _callback);

    }

    /**
     * Get collection items
     * Returns all collection items as an array of metadata objects.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @return List&lt;CollectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection items metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<CollectionItem> getCollectionItems(String collectionId) throws ApiException {
        ApiResponse<List<CollectionItem>> localVarResp = getCollectionItemsWithHttpInfo(collectionId);
        return localVarResp.getData();
    }

    /**
     * Get collection items
     * Returns all collection items as an array of metadata objects.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @return ApiResponse&lt;List&lt;CollectionItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection items metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CollectionItem>> getCollectionItemsWithHttpInfo(String collectionId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(collectionId, null);
        Type localVarReturnType = new TypeToken<List<CollectionItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection items (asynchronously)
     * Returns all collection items as an array of metadata objects.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved collection items metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionItemsAsync(String collectionId, final ApiCallback<List<CollectionItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(collectionId, _callback);
        Type localVarReturnType = new TypeToken<List<CollectionItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionRole
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided role has been granted to the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionRoleCall(String collectionId, String role, String address, String walletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/roles"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionRoleValidateBeforeCall(String collectionId, String role, String address, String walletId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getCollectionRole(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling getCollectionRole(Async)");
        }

        return getCollectionRoleCall(collectionId, role, address, walletId, _callback);

    }

    /**
     * Get collection role
     * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided role has been granted to the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean getCollectionRole(String collectionId, String role, String address, String walletId) throws ApiException {
        ApiResponse<Boolean> localVarResp = getCollectionRoleWithHttpInfo(collectionId, role, address, walletId);
        return localVarResp.getData();
    }

    /**
     * Get collection role
     * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided role has been granted to the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> getCollectionRoleWithHttpInfo(String collectionId, String role, String address, String walletId) throws ApiException {
        okhttp3.Call localVarCall = getCollectionRoleValidateBeforeCall(collectionId, role, address, walletId, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collection role (asynchronously)
     * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the boolean value representing if the provided role has been granted to the provided address or walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionRoleAsync(String collectionId, String role, String address, String walletId, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionRoleValidateBeforeCall(collectionId, role, address, walletId, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollections
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of item collections for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionsCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionsValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling getCollections(Async)");
        }

        return getCollectionsCall(xGameKey, _callback);

    }

    /**
     * Get collections
     * Returns an array of active item collections for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return List&lt;GetCollections200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of item collections for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetCollections200ResponseInner> getCollections(String xGameKey) throws ApiException {
        ApiResponse<List<GetCollections200ResponseInner>> localVarResp = getCollectionsWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Get collections
     * Returns an array of active item collections for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;List&lt;GetCollections200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of item collections for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetCollections200ResponseInner>> getCollectionsWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = getCollectionsValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<List<GetCollections200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collections (asynchronously)
     * Returns an array of active item collections for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of item collections for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionsAsync(String xGameKey, final ApiCallback<List<GetCollections200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionsValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<List<GetCollections200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grantCollectionRole
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param grantCollectionRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully granted the provided role to the provided address or address associated with the provided walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantCollectionRoleCall(String collectionId, String xAuthorization, String xWalletDecryptKey, GrantCollectionRoleRequest grantCollectionRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = grantCollectionRoleRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/roles"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantCollectionRoleValidateBeforeCall(String collectionId, String xAuthorization, String xWalletDecryptKey, GrantCollectionRoleRequest grantCollectionRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling grantCollectionRole(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling grantCollectionRole(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling grantCollectionRole(Async)");
        }

        // verify the required parameter 'grantCollectionRoleRequest' is set
        if (grantCollectionRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'grantCollectionRoleRequest' when calling grantCollectionRole(Async)");
        }

        return grantCollectionRoleCall(collectionId, xAuthorization, xWalletDecryptKey, grantCollectionRoleRequest, _callback);

    }

    /**
     * Grant collection role
     * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param grantCollectionRoleRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully granted the provided role to the provided address or address associated with the provided walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel grantCollectionRole(String collectionId, String xAuthorization, String xWalletDecryptKey, GrantCollectionRoleRequest grantCollectionRoleRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = grantCollectionRoleWithHttpInfo(collectionId, xAuthorization, xWalletDecryptKey, grantCollectionRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Grant collection role
     * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param grantCollectionRoleRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully granted the provided role to the provided address or address associated with the provided walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> grantCollectionRoleWithHttpInfo(String collectionId, String xAuthorization, String xWalletDecryptKey, GrantCollectionRoleRequest grantCollectionRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = grantCollectionRoleValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, grantCollectionRoleRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grant collection role (asynchronously)
     * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param grantCollectionRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully granted the provided role to the provided address or address associated with the provided walletId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantCollectionRoleAsync(String collectionId, String xAuthorization, String xWalletDecryptKey, GrantCollectionRoleRequest grantCollectionRoleRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantCollectionRoleValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, grantCollectionRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mintCollectionItem
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCollectionItemRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the item(s) to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mintCollectionItemCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, MintCollectionItemRequest mintCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mintCollectionItemRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/mints"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mintCollectionItemValidateBeforeCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, MintCollectionItemRequest mintCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling mintCollectionItem(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling mintCollectionItem(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling mintCollectionItem(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling mintCollectionItem(Async)");
        }

        // verify the required parameter 'mintCollectionItemRequest' is set
        if (mintCollectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'mintCollectionItemRequest' when calling mintCollectionItem(Async)");
        }

        return mintCollectionItemCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, mintCollectionItemRequest, _callback);

    }

    /**
     * Mint collection item
     * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCollectionItemRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the item(s) to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel mintCollectionItem(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, MintCollectionItemRequest mintCollectionItemRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = mintCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, mintCollectionItemRequest);
        return localVarResp.getData();
    }

    /**
     * Mint collection item
     * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCollectionItemRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the item(s) to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> mintCollectionItemWithHttpInfo(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, MintCollectionItemRequest mintCollectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = mintCollectionItemValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, mintCollectionItemRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mint collection item (asynchronously)
     * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCollectionItemRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the item(s) to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mintCollectionItemAsync(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, MintCollectionItemRequest mintCollectionItemRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = mintCollectionItemValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, mintCollectionItemRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeCollectionRole
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param revokeCollectionRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully revoked the provided role from the provided address or address associated with the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCollectionRoleCall(String collectionId, String xAuthorization, String xWalletDecryptKey, RevokeCollectionRoleRequest revokeCollectionRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeCollectionRoleRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/roles"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCollectionRoleValidateBeforeCall(String collectionId, String xAuthorization, String xWalletDecryptKey, RevokeCollectionRoleRequest revokeCollectionRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling revokeCollectionRole(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling revokeCollectionRole(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling revokeCollectionRole(Async)");
        }

        // verify the required parameter 'revokeCollectionRoleRequest' is set
        if (revokeCollectionRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCollectionRole(Async)");
        }

        return revokeCollectionRoleCall(collectionId, xAuthorization, xWalletDecryptKey, revokeCollectionRoleRequest, _callback);

    }

    /**
     * Revoke collection role
     * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param revokeCollectionRoleRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully revoked the provided role from the provided address or address associated with the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel revokeCollectionRole(String collectionId, String xAuthorization, String xWalletDecryptKey, RevokeCollectionRoleRequest revokeCollectionRoleRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = revokeCollectionRoleWithHttpInfo(collectionId, xAuthorization, xWalletDecryptKey, revokeCollectionRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Revoke collection role
     * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param revokeCollectionRoleRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully revoked the provided role from the provided address or address associated with the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> revokeCollectionRoleWithHttpInfo(String collectionId, String xAuthorization, String xWalletDecryptKey, RevokeCollectionRoleRequest revokeCollectionRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeCollectionRoleValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, revokeCollectionRoleRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke collection role (asynchronously)
     * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param revokeCollectionRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully revoked the provided role from the provided address or address associated with the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCollectionRoleAsync(String collectionId, String xAuthorization, String xWalletDecryptKey, RevokeCollectionRoleRequest revokeCollectionRoleRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCollectionRoleValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, revokeCollectionRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCollectionApproval
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param setCollectionApprovalRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set approval for the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCollectionApprovalCall(String collectionId, String xAuthorization, String xWalletDecryptKey, SetCollectionApprovalRequest setCollectionApprovalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setCollectionApprovalRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/approvals"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCollectionApprovalValidateBeforeCall(String collectionId, String xAuthorization, String xWalletDecryptKey, SetCollectionApprovalRequest setCollectionApprovalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling setCollectionApproval(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setCollectionApproval(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling setCollectionApproval(Async)");
        }

        // verify the required parameter 'setCollectionApprovalRequest' is set
        if (setCollectionApprovalRequest == null) {
            throw new ApiException("Missing the required parameter 'setCollectionApprovalRequest' when calling setCollectionApproval(Async)");
        }

        return setCollectionApprovalCall(collectionId, xAuthorization, xWalletDecryptKey, setCollectionApprovalRequest, _callback);

    }

    /**
     * Set collection approval
     * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player&#39;s owned items for this collection. Setting an approved value of &#x60;true&#x60; allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet address.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param setCollectionApprovalRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set approval for the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel setCollectionApproval(String collectionId, String xAuthorization, String xWalletDecryptKey, SetCollectionApprovalRequest setCollectionApprovalRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = setCollectionApprovalWithHttpInfo(collectionId, xAuthorization, xWalletDecryptKey, setCollectionApprovalRequest);
        return localVarResp.getData();
    }

    /**
     * Set collection approval
     * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player&#39;s owned items for this collection. Setting an approved value of &#x60;true&#x60; allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet address.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param setCollectionApprovalRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set approval for the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> setCollectionApprovalWithHttpInfo(String collectionId, String xAuthorization, String xWalletDecryptKey, SetCollectionApprovalRequest setCollectionApprovalRequest) throws ApiException {
        okhttp3.Call localVarCall = setCollectionApprovalValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, setCollectionApprovalRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set collection approval (asynchronously)
     * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player&#39;s owned items for this collection. Setting an approved value of &#x60;true&#x60; allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet address.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param setCollectionApprovalRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set approval for the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCollectionApprovalAsync(String collectionId, String xAuthorization, String xWalletDecryptKey, SetCollectionApprovalRequest setCollectionApprovalRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCollectionApprovalValidateBeforeCall(collectionId, xAuthorization, xWalletDecryptKey, setCollectionApprovalRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCollectionItemTimelock
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCollectionItemTimelockRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the provided timelock for the provided itemId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCollectionItemTimelockCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setCollectionItemTimelockRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCollectionItemTimelockValidateBeforeCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling setCollectionItemTimelock(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling setCollectionItemTimelock(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setCollectionItemTimelock(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling setCollectionItemTimelock(Async)");
        }

        // verify the required parameter 'setCollectionItemTimelockRequest' is set
        if (setCollectionItemTimelockRequest == null) {
            throw new ApiException("Missing the required parameter 'setCollectionItemTimelockRequest' when calling setCollectionItemTimelock(Async)");
        }

        return setCollectionItemTimelockCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, setCollectionItemTimelockRequest, _callback);

    }

    /**
     * Set collection item timelock
     * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCollectionItemTimelockRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the provided timelock for the provided itemId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel setCollectionItemTimelock(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = setCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, setCollectionItemTimelockRequest);
        return localVarResp.getData();
    }

    /**
     * Set collection item timelock
     * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCollectionItemTimelockRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the provided timelock for the provided itemId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> setCollectionItemTimelockWithHttpInfo(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest) throws ApiException {
        okhttp3.Call localVarCall = setCollectionItemTimelockValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, setCollectionItemTimelockRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set collection item timelock (asynchronously)
     * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCollectionItemTimelockRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the provided timelock for the provided itemId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCollectionItemTimelockAsync(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCollectionItemTimelockValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, setCollectionItemTimelockRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCollectionItem
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCollectionItemRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the provided quantity of the collectionItemId to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCollectionItemCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, TransferCollectionItemRequest transferCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCollectionItemRequest;

        // create path and map variables
        String localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/transfers"
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "collectionItemId" + "}", localVarApiClient.escapeString(collectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCollectionItemValidateBeforeCall(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, TransferCollectionItemRequest transferCollectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling transferCollectionItem(Async)");
        }

        // verify the required parameter 'collectionItemId' is set
        if (collectionItemId == null) {
            throw new ApiException("Missing the required parameter 'collectionItemId' when calling transferCollectionItem(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling transferCollectionItem(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling transferCollectionItem(Async)");
        }

        // verify the required parameter 'transferCollectionItemRequest' is set
        if (transferCollectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCollectionItemRequest' when calling transferCollectionItem(Async)");
        }

        return transferCollectionItemCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, transferCollectionItemRequest, _callback);

    }

    /**
     * Transfer collection item
     * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCollectionItemRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the provided quantity of the collectionItemId to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel transferCollectionItem(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, TransferCollectionItemRequest transferCollectionItemRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = transferCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, transferCollectionItemRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer collection item
     * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCollectionItemRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the provided quantity of the collectionItemId to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> transferCollectionItemWithHttpInfo(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, TransferCollectionItemRequest transferCollectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCollectionItemValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, transferCollectionItemRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer collection item (asynchronously)
     * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     * @param collectionId Any collection id within the MetaFab platform. (required)
     * @param collectionItemId Any item id for the collection. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCollectionItemRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the provided quantity of the collectionItemId to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCollectionItemAsync(String collectionId, BigDecimal collectionItemId, String xAuthorization, String xWalletDecryptKey, TransferCollectionItemRequest transferCollectionItemRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCollectionItemValidateBeforeCall(collectionId, collectionItemId, xAuthorization, xWalletDecryptKey, transferCollectionItemRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
