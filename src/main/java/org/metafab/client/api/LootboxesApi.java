/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateLootboxManager200Response;
import org.openapitools.client.model.CreateLootboxManagerRequest;
import org.openapitools.client.model.GetLootboxManagers200ResponseInner;
import org.openapitools.client.model.LootboxManagerLootbox;
import org.openapitools.client.model.SetLootboxManagerLootboxRequest;
import org.openapitools.client.model.TransactionModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LootboxesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LootboxesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LootboxesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLootboxManager
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createLootboxManagerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new lootbox manager and deployed its contract on the chain specified. Returns a lootbox manager object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLootboxManagerCall(String xAuthorization, String xWalletDecryptKey, CreateLootboxManagerRequest createLootboxManagerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLootboxManagerRequest;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLootboxManagerValidateBeforeCall(String xAuthorization, String xWalletDecryptKey, CreateLootboxManagerRequest createLootboxManagerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createLootboxManager(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling createLootboxManager(Async)");
        }

        // verify the required parameter 'createLootboxManagerRequest' is set
        if (createLootboxManagerRequest == null) {
            throw new ApiException("Missing the required parameter 'createLootboxManagerRequest' when calling createLootboxManager(Async)");
        }

        return createLootboxManagerCall(xAuthorization, xWalletDecryptKey, createLootboxManagerRequest, _callback);

    }

    /**
     * Create lootbox manager
     * Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game&#39;s primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \&quot;lootbox\&quot;. The required item(s) would be burned from the interacting player&#39;s wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createLootboxManagerRequest  (required)
     * @return CreateLootboxManager200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new lootbox manager and deployed its contract on the chain specified. Returns a lootbox manager object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public CreateLootboxManager200Response createLootboxManager(String xAuthorization, String xWalletDecryptKey, CreateLootboxManagerRequest createLootboxManagerRequest) throws ApiException {
        ApiResponse<CreateLootboxManager200Response> localVarResp = createLootboxManagerWithHttpInfo(xAuthorization, xWalletDecryptKey, createLootboxManagerRequest);
        return localVarResp.getData();
    }

    /**
     * Create lootbox manager
     * Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game&#39;s primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \&quot;lootbox\&quot;. The required item(s) would be burned from the interacting player&#39;s wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createLootboxManagerRequest  (required)
     * @return ApiResponse&lt;CreateLootboxManager200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new lootbox manager and deployed its contract on the chain specified. Returns a lootbox manager object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLootboxManager200Response> createLootboxManagerWithHttpInfo(String xAuthorization, String xWalletDecryptKey, CreateLootboxManagerRequest createLootboxManagerRequest) throws ApiException {
        okhttp3.Call localVarCall = createLootboxManagerValidateBeforeCall(xAuthorization, xWalletDecryptKey, createLootboxManagerRequest, null);
        Type localVarReturnType = new TypeToken<CreateLootboxManager200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create lootbox manager (asynchronously)
     * Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game&#39;s primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \&quot;lootbox\&quot;. The required item(s) would be burned from the interacting player&#39;s wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createLootboxManagerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new lootbox manager and deployed its contract on the chain specified. Returns a lootbox manager object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLootboxManagerAsync(String xAuthorization, String xWalletDecryptKey, CreateLootboxManagerRequest createLootboxManagerRequest, final ApiCallback<CreateLootboxManager200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLootboxManagerValidateBeforeCall(xAuthorization, xWalletDecryptKey, createLootboxManagerRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateLootboxManager200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLootboxManagerLootbox
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootbox. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLootboxManagerLootboxCall(String lootboxManagerId, String lootboxManagerLootboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}"
            .replace("{" + "lootboxManagerId" + "}", localVarApiClient.escapeString(lootboxManagerId.toString()))
            .replace("{" + "lootboxManagerLootboxId" + "}", localVarApiClient.escapeString(lootboxManagerLootboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLootboxManagerLootboxValidateBeforeCall(String lootboxManagerId, String lootboxManagerLootboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lootboxManagerId' is set
        if (lootboxManagerId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'lootboxManagerLootboxId' is set
        if (lootboxManagerLootboxId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerLootboxId' when calling getLootboxManagerLootbox(Async)");
        }

        return getLootboxManagerLootboxCall(lootboxManagerId, lootboxManagerLootboxId, _callback);

    }

    /**
     * Get lootbox manager lootbox
     * Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @return LootboxManagerLootbox
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootbox. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public LootboxManagerLootbox getLootboxManagerLootbox(String lootboxManagerId, String lootboxManagerLootboxId) throws ApiException {
        ApiResponse<LootboxManagerLootbox> localVarResp = getLootboxManagerLootboxWithHttpInfo(lootboxManagerId, lootboxManagerLootboxId);
        return localVarResp.getData();
    }

    /**
     * Get lootbox manager lootbox
     * Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @return ApiResponse&lt;LootboxManagerLootbox&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootbox. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LootboxManagerLootbox> getLootboxManagerLootboxWithHttpInfo(String lootboxManagerId, String lootboxManagerLootboxId) throws ApiException {
        okhttp3.Call localVarCall = getLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, lootboxManagerLootboxId, null);
        Type localVarReturnType = new TypeToken<LootboxManagerLootbox>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lootbox manager lootbox (asynchronously)
     * Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootbox. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLootboxManagerLootboxAsync(String lootboxManagerId, String lootboxManagerLootboxId, final ApiCallback<LootboxManagerLootbox> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, lootboxManagerLootboxId, _callback);
        Type localVarReturnType = new TypeToken<LootboxManagerLootbox>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLootboxManagerLootboxes
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootboxes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLootboxManagerLootboxesCall(String lootboxManagerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes"
            .replace("{" + "lootboxManagerId" + "}", localVarApiClient.escapeString(lootboxManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLootboxManagerLootboxesValidateBeforeCall(String lootboxManagerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lootboxManagerId' is set
        if (lootboxManagerId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootboxes(Async)");
        }

        return getLootboxManagerLootboxesCall(lootboxManagerId, _callback);

    }

    /**
     * Get lootbox manager lootboxes
     * Returns all lootbox manager lootboxes as an array of lootbox objects.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @return List&lt;LootboxManagerLootbox&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootboxes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<LootboxManagerLootbox> getLootboxManagerLootboxes(String lootboxManagerId) throws ApiException {
        ApiResponse<List<LootboxManagerLootbox>> localVarResp = getLootboxManagerLootboxesWithHttpInfo(lootboxManagerId);
        return localVarResp.getData();
    }

    /**
     * Get lootbox manager lootboxes
     * Returns all lootbox manager lootboxes as an array of lootbox objects.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @return ApiResponse&lt;List&lt;LootboxManagerLootbox&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootboxes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LootboxManagerLootbox>> getLootboxManagerLootboxesWithHttpInfo(String lootboxManagerId) throws ApiException {
        okhttp3.Call localVarCall = getLootboxManagerLootboxesValidateBeforeCall(lootboxManagerId, null);
        Type localVarReturnType = new TypeToken<List<LootboxManagerLootbox>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lootbox manager lootboxes (asynchronously)
     * Returns all lootbox manager lootboxes as an array of lootbox objects.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved lootbox manager lootboxes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLootboxManagerLootboxesAsync(String lootboxManagerId, final ApiCallback<List<LootboxManagerLootbox>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLootboxManagerLootboxesValidateBeforeCall(lootboxManagerId, _callback);
        Type localVarReturnType = new TypeToken<List<LootboxManagerLootbox>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLootboxManagers
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLootboxManagersCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLootboxManagersValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling getLootboxManagers(Async)");
        }

        return getLootboxManagersCall(xGameKey, _callback);

    }

    /**
     * Get lootbox managers
     * Returns an array of active lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return List&lt;GetLootboxManagers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetLootboxManagers200ResponseInner> getLootboxManagers(String xGameKey) throws ApiException {
        ApiResponse<List<GetLootboxManagers200ResponseInner>> localVarResp = getLootboxManagersWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Get lootbox managers
     * Returns an array of active lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;List&lt;GetLootboxManagers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetLootboxManagers200ResponseInner>> getLootboxManagersWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = getLootboxManagersValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<List<GetLootboxManagers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lootbox managers (asynchronously)
     * Returns an array of active lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLootboxManagersAsync(String xGameKey, final ApiCallback<List<GetLootboxManagers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLootboxManagersValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<List<GetLootboxManagers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openLootboxManagerLootbox
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully opened provided lootbox manager lootbox. Returns an array of transaction objects. The first transaction object being for the lootbox opening, the second for claiming its contents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openLootboxManagerLootboxCall(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens"
            .replace("{" + "lootboxManagerId" + "}", localVarApiClient.escapeString(lootboxManagerId.toString()))
            .replace("{" + "lootboxManagerLootboxId" + "}", localVarApiClient.escapeString(lootboxManagerLootboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openLootboxManagerLootboxValidateBeforeCall(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lootboxManagerId' is set
        if (lootboxManagerId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerId' when calling openLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'lootboxManagerLootboxId' is set
        if (lootboxManagerLootboxId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerLootboxId' when calling openLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling openLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling openLootboxManagerLootbox(Async)");
        }

        return openLootboxManagerLootboxCall(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey, _callback);

    }

    /**
     * Open lootbox manager lootbox
     * Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @return List&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully opened provided lootbox manager lootbox. Returns an array of transaction objects. The first transaction object being for the lootbox opening, the second for claiming its contents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionModel> openLootboxManagerLootbox(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey) throws ApiException {
        ApiResponse<List<TransactionModel>> localVarResp = openLootboxManagerLootboxWithHttpInfo(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey);
        return localVarResp.getData();
    }

    /**
     * Open lootbox manager lootbox
     * Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @return ApiResponse&lt;List&lt;TransactionModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully opened provided lootbox manager lootbox. Returns an array of transaction objects. The first transaction object being for the lootbox opening, the second for claiming its contents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionModel>> openLootboxManagerLootboxWithHttpInfo(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey) throws ApiException {
        okhttp3.Call localVarCall = openLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey, null);
        Type localVarReturnType = new TypeToken<List<TransactionModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open lootbox manager lootbox (asynchronously)
     * Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully opened provided lootbox manager lootbox. Returns an array of transaction objects. The first transaction object being for the lootbox opening, the second for claiming its contents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openLootboxManagerLootboxAsync(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey, final ApiCallback<List<TransactionModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLootboxManagerLootbox
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided lootbox from the provided lootbox manager. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLootboxManagerLootboxCall(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}"
            .replace("{" + "lootboxManagerId" + "}", localVarApiClient.escapeString(lootboxManagerId.toString()))
            .replace("{" + "lootboxManagerLootboxId" + "}", localVarApiClient.escapeString(lootboxManagerLootboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLootboxManagerLootboxValidateBeforeCall(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lootboxManagerId' is set
        if (lootboxManagerId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerId' when calling removeLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'lootboxManagerLootboxId' is set
        if (lootboxManagerLootboxId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerLootboxId' when calling removeLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling removeLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling removeLootboxManagerLootbox(Async)");
        }

        return removeLootboxManagerLootboxCall(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey, _callback);

    }

    /**
     * Remove lootbox manager lootbox
     * Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided lootbox from the provided lootbox manager. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel removeLootboxManagerLootbox(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = removeLootboxManagerLootboxWithHttpInfo(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey);
        return localVarResp.getData();
    }

    /**
     * Remove lootbox manager lootbox
     * Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided lootbox from the provided lootbox manager. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> removeLootboxManagerLootboxWithHttpInfo(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey) throws ApiException {
        okhttp3.Call localVarCall = removeLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove lootbox manager lootbox (asynchronously)
     * Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided lootbox from the provided lootbox manager. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLootboxManagerLootboxAsync(String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xWalletDecryptKey, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xWalletDecryptKey, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLootboxManagerLootbox
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setLootboxManagerLootboxRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an lootbox manager lootbox for the provided lootbox id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLootboxManagerLootboxCall(String lootboxManagerId, String xAuthorization, String xWalletDecryptKey, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLootboxManagerLootboxRequest;

        // create path and map variables
        String localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes"
            .replace("{" + "lootboxManagerId" + "}", localVarApiClient.escapeString(lootboxManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xWalletDecryptKey != null) {
            localVarHeaderParams.put("X-Wallet-Decrypt-Key", localVarApiClient.parameterToString(xWalletDecryptKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLootboxManagerLootboxValidateBeforeCall(String lootboxManagerId, String xAuthorization, String xWalletDecryptKey, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lootboxManagerId' is set
        if (lootboxManagerId == null) {
            throw new ApiException("Missing the required parameter 'lootboxManagerId' when calling setLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'xWalletDecryptKey' is set
        if (xWalletDecryptKey == null) {
            throw new ApiException("Missing the required parameter 'xWalletDecryptKey' when calling setLootboxManagerLootbox(Async)");
        }

        // verify the required parameter 'setLootboxManagerLootboxRequest' is set
        if (setLootboxManagerLootboxRequest == null) {
            throw new ApiException("Missing the required parameter 'setLootboxManagerLootboxRequest' when calling setLootboxManagerLootbox(Async)");
        }

        return setLootboxManagerLootboxCall(lootboxManagerId, xAuthorization, xWalletDecryptKey, setLootboxManagerLootboxRequest, _callback);

    }

    /**
     * Set lootbox manager lootbox
     * Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setLootboxManagerLootboxRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an lootbox manager lootbox for the provided lootbox id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel setLootboxManagerLootbox(String lootboxManagerId, String xAuthorization, String xWalletDecryptKey, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = setLootboxManagerLootboxWithHttpInfo(lootboxManagerId, xAuthorization, xWalletDecryptKey, setLootboxManagerLootboxRequest);
        return localVarResp.getData();
    }

    /**
     * Set lootbox manager lootbox
     * Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setLootboxManagerLootboxRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an lootbox manager lootbox for the provided lootbox id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> setLootboxManagerLootboxWithHttpInfo(String lootboxManagerId, String xAuthorization, String xWalletDecryptKey, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest) throws ApiException {
        okhttp3.Call localVarCall = setLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, xAuthorization, xWalletDecryptKey, setLootboxManagerLootboxRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set lootbox manager lootbox (asynchronously)
     * Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
     * @param lootboxManagerId Any lootbox manager id within the MetaFab platform. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setLootboxManagerLootboxRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated an lootbox manager lootbox for the provided lootbox id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLootboxManagerLootboxAsync(String lootboxManagerId, String xAuthorization, String xWalletDecryptKey, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLootboxManagerLootboxValidateBeforeCall(lootboxManagerId, xAuthorization, xWalletDecryptKey, setLootboxManagerLootboxRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
