/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.CreatePlayerRequest;
import org.openapitools.client.model.GetPlayerData200Response;
import org.openapitools.client.model.PlayerModel;
import org.openapitools.client.model.PublicPlayer;
import org.openapitools.client.model.RemovePlayerConnectedWalletRequest;
import org.openapitools.client.model.SetPlayerConnectedWallet200Response;
import org.openapitools.client.model.SetPlayerConnectedWalletRequest;
import org.openapitools.client.model.SetPlayerDataRequest;
import org.openapitools.client.model.UpdatePlayerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlayersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authPlayer
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPlayerCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/players/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authPlayerValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling authPlayer(Async)");
        }
        

        okhttp3.Call localVarCall = authPlayerCall(xGameKey, _callback);
        return localVarCall;

    }

    /**
     * Authenticate player
     * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return AuthPlayer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public AuthPlayer200Response authPlayer(String xGameKey) throws ApiException {
        ApiResponse<AuthPlayer200Response> localVarResp = authPlayerWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Authenticate player
     * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;AuthPlayer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthPlayer200Response> authPlayerWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = authPlayerValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate player (asynchronously)
     * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully authorized the request and retrieved a player object containing access token, wallet, and other details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPlayerAsync(String xGameKey, final ApiCallback<AuthPlayer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = authPlayerValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPlayer
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param createPlayerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player. Returns a player object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlayerCall(String xGameKey, CreatePlayerRequest createPlayerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlayerRequest;

        // create path and map variables
        String localVarPath = "/v1/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlayerValidateBeforeCall(String xGameKey, CreatePlayerRequest createPlayerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling createPlayer(Async)");
        }
        
        // verify the required parameter 'createPlayerRequest' is set
        if (createPlayerRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlayerRequest' when calling createPlayer(Async)");
        }
        

        okhttp3.Call localVarCall = createPlayerCall(xGameKey, createPlayerRequest, _callback);
        return localVarCall;

    }

    /**
     * Create player
     * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param createPlayerRequest  (required)
     * @return AuthPlayer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player. Returns a player object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public AuthPlayer200Response createPlayer(String xGameKey, CreatePlayerRequest createPlayerRequest) throws ApiException {
        ApiResponse<AuthPlayer200Response> localVarResp = createPlayerWithHttpInfo(xGameKey, createPlayerRequest);
        return localVarResp.getData();
    }

    /**
     * Create player
     * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param createPlayerRequest  (required)
     * @return ApiResponse&lt;AuthPlayer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player. Returns a player object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthPlayer200Response> createPlayerWithHttpInfo(String xGameKey, CreatePlayerRequest createPlayerRequest) throws ApiException {
        okhttp3.Call localVarCall = createPlayerValidateBeforeCall(xGameKey, createPlayerRequest, null);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create player (asynchronously)
     * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param createPlayerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new player. Returns a player object containing a wallet (used to interact with contracts, currencies, etc). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlayerAsync(String xGameKey, CreatePlayerRequest createPlayerRequest, final ApiCallback<AuthPlayer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlayerValidateBeforeCall(xGameKey, createPlayerRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthPlayer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayer
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerCall(String playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/players/{playerId}"
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerValidateBeforeCall(String playerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling getPlayer(Async)");
        }
        

        okhttp3.Call localVarCall = getPlayerCall(playerId, _callback);
        return localVarCall;

    }

    /**
     * Get player
     * Returns a player object for the provided player id.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @return PublicPlayer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public PublicPlayer getPlayer(String playerId) throws ApiException {
        ApiResponse<PublicPlayer> localVarResp = getPlayerWithHttpInfo(playerId);
        return localVarResp.getData();
    }

    /**
     * Get player
     * Returns a player object for the provided player id.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @return ApiResponse&lt;PublicPlayer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicPlayer> getPlayerWithHttpInfo(String playerId) throws ApiException {
        okhttp3.Call localVarCall = getPlayerValidateBeforeCall(playerId, null);
        Type localVarReturnType = new TypeToken<PublicPlayer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get player (asynchronously)
     * Returns a player object for the provided player id.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerAsync(String playerId, final ApiCallback<PublicPlayer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerValidateBeforeCall(playerId, _callback);
        Type localVarReturnType = new TypeToken<PublicPlayer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayerData
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerDataCall(String playerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/players/{playerId}/data"
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerDataValidateBeforeCall(String playerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling getPlayerData(Async)");
        }
        

        okhttp3.Call localVarCall = getPlayerDataCall(playerId, _callback);
        return localVarCall;

    }

    /**
     * Get player data
     * Returns the latest public and protected data as an object for the provided playerId.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @return GetPlayerData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public GetPlayerData200Response getPlayerData(String playerId) throws ApiException {
        ApiResponse<GetPlayerData200Response> localVarResp = getPlayerDataWithHttpInfo(playerId);
        return localVarResp.getData();
    }

    /**
     * Get player data
     * Returns the latest public and protected data as an object for the provided playerId.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @return ApiResponse&lt;GetPlayerData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPlayerData200Response> getPlayerDataWithHttpInfo(String playerId) throws ApiException {
        okhttp3.Call localVarCall = getPlayerDataValidateBeforeCall(playerId, null);
        Type localVarReturnType = new TypeToken<GetPlayerData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get player data (asynchronously)
     * Returns the latest public and protected data as an object for the provided playerId.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerDataAsync(String playerId, final ApiCallback<GetPlayerData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerDataValidateBeforeCall(playerId, _callback);
        Type localVarReturnType = new TypeToken<GetPlayerData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayers
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved players. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayersCall(String xAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayersValidateBeforeCall(String xAuthorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling getPlayers(Async)");
        }
        

        okhttp3.Call localVarCall = getPlayersCall(xAuthorization, _callback);
        return localVarCall;

    }

    /**
     * Get players
     * Returns all players for the authenticated game as an array of player objects.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @return List&lt;PublicPlayer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved players. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public List<PublicPlayer> getPlayers(String xAuthorization) throws ApiException {
        ApiResponse<List<PublicPlayer>> localVarResp = getPlayersWithHttpInfo(xAuthorization);
        return localVarResp.getData();
    }

    /**
     * Get players
     * Returns all players for the authenticated game as an array of player objects.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @return ApiResponse&lt;List&lt;PublicPlayer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved players. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PublicPlayer>> getPlayersWithHttpInfo(String xAuthorization) throws ApiException {
        okhttp3.Call localVarCall = getPlayersValidateBeforeCall(xAuthorization, null);
        Type localVarReturnType = new TypeToken<List<PublicPlayer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get players (asynchronously)
     * Returns all players for the authenticated game as an array of player objects.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved players. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayersAsync(String xAuthorization, final ApiCallback<List<PublicPlayer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayersValidateBeforeCall(xAuthorization, _callback);
        Type localVarReturnType = new TypeToken<List<PublicPlayer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePlayerConnectedWallet
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param playerWalletId Any player wallet id within the MetaFab ecosystem. (required)
     * @param removePlayerConnectedWalletRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the player&#39;s external wallet. Returns an empty 200 response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePlayerConnectedWalletCall(String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removePlayerConnectedWalletRequest;

        // create path and map variables
        String localVarPath = "/v1/players/{playerId}/wallets/{playerWalletId}"
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "playerWalletId" + "\\}", localVarApiClient.escapeString(playerWalletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePlayerConnectedWalletValidateBeforeCall(String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling removePlayerConnectedWallet(Async)");
        }
        
        // verify the required parameter 'playerWalletId' is set
        if (playerWalletId == null) {
            throw new ApiException("Missing the required parameter 'playerWalletId' when calling removePlayerConnectedWallet(Async)");
        }
        
        // verify the required parameter 'removePlayerConnectedWalletRequest' is set
        if (removePlayerConnectedWalletRequest == null) {
            throw new ApiException("Missing the required parameter 'removePlayerConnectedWalletRequest' when calling removePlayerConnectedWallet(Async)");
        }
        

        okhttp3.Call localVarCall = removePlayerConnectedWalletCall(playerId, playerWalletId, removePlayerConnectedWalletRequest, _callback);
        return localVarCall;

    }

    /**
     * Remove player connected wallet
     * Removes an external wallet from a player account. The player&#39;s wallet is reverted to their custodial wallet.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param playerWalletId Any player wallet id within the MetaFab ecosystem. (required)
     * @param removePlayerConnectedWalletRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the player&#39;s external wallet. Returns an empty 200 response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public void removePlayerConnectedWallet(String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest) throws ApiException {
        removePlayerConnectedWalletWithHttpInfo(playerId, playerWalletId, removePlayerConnectedWalletRequest);
    }

    /**
     * Remove player connected wallet
     * Removes an external wallet from a player account. The player&#39;s wallet is reverted to their custodial wallet.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param playerWalletId Any player wallet id within the MetaFab ecosystem. (required)
     * @param removePlayerConnectedWalletRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the player&#39;s external wallet. Returns an empty 200 response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removePlayerConnectedWalletWithHttpInfo(String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = removePlayerConnectedWalletValidateBeforeCall(playerId, playerWalletId, removePlayerConnectedWalletRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove player connected wallet (asynchronously)
     * Removes an external wallet from a player account. The player&#39;s wallet is reverted to their custodial wallet.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param playerWalletId Any player wallet id within the MetaFab ecosystem. (required)
     * @param removePlayerConnectedWalletRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the player&#39;s external wallet. Returns an empty 200 response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePlayerConnectedWalletAsync(String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePlayerConnectedWalletValidateBeforeCall(playerId, playerWalletId, removePlayerConnectedWalletRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPlayerConnectedWallet
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param setPlayerConnectedWalletRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the player&#39;s external wallet. Returns the connected wallet id and address, as well as connection transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPlayerConnectedWalletCall(String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPlayerConnectedWalletRequest;

        // create path and map variables
        String localVarPath = "/v1/players/{playerId}/wallets"
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPlayerConnectedWalletValidateBeforeCall(String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling setPlayerConnectedWallet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setPlayerConnectedWallet(Async)");
        }
        
        // verify the required parameter 'setPlayerConnectedWalletRequest' is set
        if (setPlayerConnectedWalletRequest == null) {
            throw new ApiException("Missing the required parameter 'setPlayerConnectedWalletRequest' when calling setPlayerConnectedWallet(Async)");
        }
        

        okhttp3.Call localVarCall = setPlayerConnectedWalletCall(playerId, xAuthorization, setPlayerConnectedWalletRequest, _callback);
        return localVarCall;

    }

    /**
     * Set player connected wallet
     * Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game&#39;s set of contracts to a player&#39;s password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game&#39;s related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param setPlayerConnectedWalletRequest  (required)
     * @return SetPlayerConnectedWallet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the player&#39;s external wallet. Returns the connected wallet id and address, as well as connection transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public SetPlayerConnectedWallet200Response setPlayerConnectedWallet(String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest) throws ApiException {
        ApiResponse<SetPlayerConnectedWallet200Response> localVarResp = setPlayerConnectedWalletWithHttpInfo(playerId, xAuthorization, setPlayerConnectedWalletRequest);
        return localVarResp.getData();
    }

    /**
     * Set player connected wallet
     * Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game&#39;s set of contracts to a player&#39;s password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game&#39;s related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param setPlayerConnectedWalletRequest  (required)
     * @return ApiResponse&lt;SetPlayerConnectedWallet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the player&#39;s external wallet. Returns the connected wallet id and address, as well as connection transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetPlayerConnectedWallet200Response> setPlayerConnectedWalletWithHttpInfo(String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = setPlayerConnectedWalletValidateBeforeCall(playerId, xAuthorization, setPlayerConnectedWalletRequest, null);
        Type localVarReturnType = new TypeToken<SetPlayerConnectedWallet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set player connected wallet (asynchronously)
     * Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game&#39;s set of contracts to a player&#39;s password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game&#39;s related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param setPlayerConnectedWalletRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the player&#39;s external wallet. Returns the connected wallet id and address, as well as connection transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPlayerConnectedWalletAsync(String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest, final ApiCallback<SetPlayerConnectedWallet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPlayerConnectedWalletValidateBeforeCall(playerId, xAuthorization, setPlayerConnectedWalletRequest, _callback);
        Type localVarReturnType = new TypeToken<SetPlayerConnectedWallet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPlayerData
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param setPlayerDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPlayerDataCall(String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPlayerDataRequest;

        // create path and map variables
        String localVarPath = "/v1/players/{playerId}/data"
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPlayerDataValidateBeforeCall(String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling setPlayerData(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setPlayerData(Async)");
        }
        
        // verify the required parameter 'setPlayerDataRequest' is set
        if (setPlayerDataRequest == null) {
            throw new ApiException("Missing the required parameter 'setPlayerDataRequest' when calling setPlayerData(Async)");
        }
        

        okhttp3.Call localVarCall = setPlayerDataCall(playerId, xAuthorization, setPlayerDataRequest, _callback);
        return localVarCall;

    }

    /**
     * Set player data
     * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param setPlayerDataRequest  (required)
     * @return GetPlayerData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public GetPlayerData200Response setPlayerData(String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest) throws ApiException {
        ApiResponse<GetPlayerData200Response> localVarResp = setPlayerDataWithHttpInfo(playerId, xAuthorization, setPlayerDataRequest);
        return localVarResp.getData();
    }

    /**
     * Set player data
     * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param setPlayerDataRequest  (required)
     * @return ApiResponse&lt;GetPlayerData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPlayerData200Response> setPlayerDataWithHttpInfo(String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest) throws ApiException {
        okhttp3.Call localVarCall = setPlayerDataValidateBeforeCall(playerId, xAuthorization, setPlayerDataRequest, null);
        Type localVarReturnType = new TypeToken<GetPlayerData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set player data (asynchronously)
     * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param setPlayerDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set player data. Returns latest player data object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPlayerDataAsync(String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest, final ApiCallback<GetPlayerData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPlayerDataValidateBeforeCall(playerId, xAuthorization, setPlayerDataRequest, _callback);
        Type localVarReturnType = new TypeToken<GetPlayerData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePlayer
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param updatePlayerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlayerCall(String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePlayerRequest;

        // create path and map variables
        String localVarPath = "/v1/players/{playerId}"
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlayerValidateBeforeCall(String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling updatePlayer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling updatePlayer(Async)");
        }
        
        // verify the required parameter 'updatePlayerRequest' is set
        if (updatePlayerRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePlayerRequest' when calling updatePlayer(Async)");
        }
        

        okhttp3.Call localVarCall = updatePlayerCall(playerId, xAuthorization, updatePlayerRequest, _callback);
        return localVarCall;

    }

    /**
     * Update player
     * Update various fields specific to a player. Such as changing its password and resetting its access token.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param updatePlayerRequest  (required)
     * @return PlayerModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public PlayerModel updatePlayer(String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest) throws ApiException {
        ApiResponse<PlayerModel> localVarResp = updatePlayerWithHttpInfo(playerId, xAuthorization, updatePlayerRequest);
        return localVarResp.getData();
    }

    /**
     * Update player
     * Update various fields specific to a player. Such as changing its password and resetting its access token.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param updatePlayerRequest  (required)
     * @return ApiResponse&lt;PlayerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayerModel> updatePlayerWithHttpInfo(String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePlayerValidateBeforeCall(playerId, xAuthorization, updatePlayerRequest, null);
        Type localVarReturnType = new TypeToken<PlayerModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update player (asynchronously)
     * Update various fields specific to a player. Such as changing its password and resetting its access token.
     * @param playerId Any player id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param updatePlayerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated player object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlayerAsync(String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest, final ApiCallback<PlayerModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlayerValidateBeforeCall(playerId, xAuthorization, updatePlayerRequest, _callback);
        Type localVarReturnType = new TypeToken<PlayerModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
