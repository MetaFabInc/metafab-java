/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.metafab.client.api;

import org.metafab.client.ApiCallback;
import org.metafab.client.ApiClient;
import org.metafab.client.ApiException;
import org.metafab.client.ApiResponse;
import org.metafab.client.Configuration;
import org.metafab.client.Pair;
import org.metafab.client.ProgressRequestBody;
import org.metafab.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateShop200Response;
import org.openapitools.client.model.CreateShopRequest;
import org.openapitools.client.model.GetShops200ResponseInner;
import org.openapitools.client.model.SetShopOfferRequest;
import org.openapitools.client.model.ShopOffer;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.WithdrawFromShopRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShopsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShopsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShopsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createShop
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createShopRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new shop and deployed its contract on the chain specified. Returns a shop object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShopCall(String xAuthorization, String xPassword, CreateShopRequest createShopRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShopRequest;

        // create path and map variables
        String localVarPath = "/v1/shops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShopValidateBeforeCall(String xAuthorization, String xPassword, CreateShopRequest createShopRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createShop(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling createShop(Async)");
        }
        
        // verify the required parameter 'createShopRequest' is set
        if (createShopRequest == null) {
            throw new ApiException("Missing the required parameter 'createShopRequest' when calling createShop(Async)");
        }
        

        okhttp3.Call localVarCall = createShopCall(xAuthorization, xPassword, createShopRequest, _callback);
        return localVarCall;

    }

    /**
     * Create shop
     * Creates a new game shop and deploys a shop contract on behalf of the authenticating game&#39;s primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createShopRequest  (required)
     * @return CreateShop200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new shop and deployed its contract on the chain specified. Returns a shop object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public CreateShop200Response createShop(String xAuthorization, String xPassword, CreateShopRequest createShopRequest) throws ApiException {
        ApiResponse<CreateShop200Response> localVarResp = createShopWithHttpInfo(xAuthorization, xPassword, createShopRequest);
        return localVarResp.getData();
    }

    /**
     * Create shop
     * Creates a new game shop and deploys a shop contract on behalf of the authenticating game&#39;s primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createShopRequest  (required)
     * @return ApiResponse&lt;CreateShop200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new shop and deployed its contract on the chain specified. Returns a shop object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateShop200Response> createShopWithHttpInfo(String xAuthorization, String xPassword, CreateShopRequest createShopRequest) throws ApiException {
        okhttp3.Call localVarCall = createShopValidateBeforeCall(xAuthorization, xPassword, createShopRequest, null);
        Type localVarReturnType = new TypeToken<CreateShop200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create shop (asynchronously)
     * Creates a new game shop and deploys a shop contract on behalf of the authenticating game&#39;s primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createShopRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new shop and deployed its contract on the chain specified. Returns a shop object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShopAsync(String xAuthorization, String xPassword, CreateShopRequest createShopRequest, final ApiCallback<CreateShop200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShopValidateBeforeCall(xAuthorization, xPassword, createShopRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateShop200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShopOffer
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopOfferCall(String shopId, String shopOfferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shops/{shopId}/items/{shopOfferId}"
            .replaceAll("\\{" + "shopId" + "\\}", localVarApiClient.escapeString(shopId.toString()))
            .replaceAll("\\{" + "shopOfferId" + "\\}", localVarApiClient.escapeString(shopOfferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShopOfferValidateBeforeCall(String shopId, String shopOfferId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling getShopOffer(Async)");
        }
        
        // verify the required parameter 'shopOfferId' is set
        if (shopOfferId == null) {
            throw new ApiException("Missing the required parameter 'shopOfferId' when calling getShopOffer(Async)");
        }
        

        okhttp3.Call localVarCall = getShopOfferCall(shopId, shopOfferId, _callback);
        return localVarCall;

    }

    /**
     * Get shop offer
     * Returns a shop offer object for the provided shopOfferId.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @return ShopOffer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ShopOffer getShopOffer(String shopId, String shopOfferId) throws ApiException {
        ApiResponse<ShopOffer> localVarResp = getShopOfferWithHttpInfo(shopId, shopOfferId);
        return localVarResp.getData();
    }

    /**
     * Get shop offer
     * Returns a shop offer object for the provided shopOfferId.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @return ApiResponse&lt;ShopOffer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOffer> getShopOfferWithHttpInfo(String shopId, String shopOfferId) throws ApiException {
        okhttp3.Call localVarCall = getShopOfferValidateBeforeCall(shopId, shopOfferId, null);
        Type localVarReturnType = new TypeToken<ShopOffer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shop offer (asynchronously)
     * Returns a shop offer object for the provided shopOfferId.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offer. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopOfferAsync(String shopId, String shopOfferId, final ApiCallback<ShopOffer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShopOfferValidateBeforeCall(shopId, shopOfferId, _callback);
        Type localVarReturnType = new TypeToken<ShopOffer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShopOffers
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopOffersCall(String shopId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shops/{shopId}/offers"
            .replaceAll("\\{" + "shopId" + "\\}", localVarApiClient.escapeString(shopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShopOffersValidateBeforeCall(String shopId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling getShopOffers(Async)");
        }
        

        okhttp3.Call localVarCall = getShopOffersCall(shopId, _callback);
        return localVarCall;

    }

    /**
     * Get shop offers
     * Returns all shop offers as an array of shop offer objects.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @return List&lt;ShopOffer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<ShopOffer> getShopOffers(String shopId) throws ApiException {
        ApiResponse<List<ShopOffer>> localVarResp = getShopOffersWithHttpInfo(shopId);
        return localVarResp.getData();
    }

    /**
     * Get shop offers
     * Returns all shop offers as an array of shop offer objects.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @return ApiResponse&lt;List&lt;ShopOffer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShopOffer>> getShopOffersWithHttpInfo(String shopId) throws ApiException {
        okhttp3.Call localVarCall = getShopOffersValidateBeforeCall(shopId, null);
        Type localVarReturnType = new TypeToken<List<ShopOffer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shop offers (asynchronously)
     * Returns all shop offers as an array of shop offer objects.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved shop offers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopOffersAsync(String shopId, final ApiCallback<List<ShopOffer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShopOffersValidateBeforeCall(shopId, _callback);
        Type localVarReturnType = new TypeToken<List<ShopOffer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShops
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of shops for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopsCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShopsValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling getShops(Async)");
        }
        

        okhttp3.Call localVarCall = getShopsCall(xGameKey, _callback);
        return localVarCall;

    }

    /**
     * Get shops
     * Returns an array of active shops for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return List&lt;GetShops200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of shops for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetShops200ResponseInner> getShops(String xGameKey) throws ApiException {
        ApiResponse<List<GetShops200ResponseInner>> localVarResp = getShopsWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Get shops
     * Returns an array of active shops for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;List&lt;GetShops200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of shops for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetShops200ResponseInner>> getShopsWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = getShopsValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<List<GetShops200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shops (asynchronously)
     * Returns an array of active shops for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of shops for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShopsAsync(String xGameKey, final ApiCallback<List<GetShops200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShopsValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<List<GetShops200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeShopOffer
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided shop. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeShopOfferCall(String shopId, String shopOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shops/{shopId}/offers/{shopOfferId}"
            .replaceAll("\\{" + "shopId" + "\\}", localVarApiClient.escapeString(shopId.toString()))
            .replaceAll("\\{" + "shopOfferId" + "\\}", localVarApiClient.escapeString(shopOfferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeShopOfferValidateBeforeCall(String shopId, String shopOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling removeShopOffer(Async)");
        }
        
        // verify the required parameter 'shopOfferId' is set
        if (shopOfferId == null) {
            throw new ApiException("Missing the required parameter 'shopOfferId' when calling removeShopOffer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling removeShopOffer(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling removeShopOffer(Async)");
        }
        

        okhttp3.Call localVarCall = removeShopOfferCall(shopId, shopOfferId, xAuthorization, xPassword, _callback);
        return localVarCall;

    }

    /**
     * Remove shop offer
     * Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided shop. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel removeShopOffer(String shopId, String shopOfferId, String xAuthorization, String xPassword) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = removeShopOfferWithHttpInfo(shopId, shopOfferId, xAuthorization, xPassword);
        return localVarResp.getData();
    }

    /**
     * Remove shop offer
     * Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided shop. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> removeShopOfferWithHttpInfo(String shopId, String shopOfferId, String xAuthorization, String xPassword) throws ApiException {
        okhttp3.Call localVarCall = removeShopOfferValidateBeforeCall(shopId, shopOfferId, xAuthorization, xPassword, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove shop offer (asynchronously)
     * Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the provided offer from the provided shop. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeShopOfferAsync(String shopId, String shopOfferId, String xAuthorization, String xPassword, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeShopOfferValidateBeforeCall(shopId, shopOfferId, xAuthorization, xPassword, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setShopOffer
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setShopOfferRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated a shop offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setShopOfferCall(String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setShopOfferRequest;

        // create path and map variables
        String localVarPath = "/v1/shops/{shopId}/offers"
            .replaceAll("\\{" + "shopId" + "\\}", localVarApiClient.escapeString(shopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setShopOfferValidateBeforeCall(String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling setShopOffer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setShopOffer(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling setShopOffer(Async)");
        }
        
        // verify the required parameter 'setShopOfferRequest' is set
        if (setShopOfferRequest == null) {
            throw new ApiException("Missing the required parameter 'setShopOfferRequest' when calling setShopOffer(Async)");
        }
        

        okhttp3.Call localVarCall = setShopOfferCall(shopId, xAuthorization, xPassword, setShopOfferRequest, _callback);
        return localVarCall;

    }

    /**
     * Set shop offer
     * Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setShopOfferRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated a shop offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel setShopOffer(String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = setShopOfferWithHttpInfo(shopId, xAuthorization, xPassword, setShopOfferRequest);
        return localVarResp.getData();
    }

    /**
     * Set shop offer
     * Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setShopOfferRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated a shop offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> setShopOfferWithHttpInfo(String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest) throws ApiException {
        okhttp3.Call localVarCall = setShopOfferValidateBeforeCall(shopId, xAuthorization, xPassword, setShopOfferRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set shop offer (asynchronously)
     * Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setShopOfferRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated a shop offer for the provided offer id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setShopOfferAsync(String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setShopOfferValidateBeforeCall(shopId, xAuthorization, xPassword, setShopOfferRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for useShopOffer
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided shop offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useShopOfferCall(String shopId, String shopOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shops/{shopId}/offers/{shopOfferId}/uses"
            .replaceAll("\\{" + "shopId" + "\\}", localVarApiClient.escapeString(shopId.toString()))
            .replaceAll("\\{" + "shopOfferId" + "\\}", localVarApiClient.escapeString(shopOfferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call useShopOfferValidateBeforeCall(String shopId, String shopOfferId, String xAuthorization, String xPassword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling useShopOffer(Async)");
        }
        
        // verify the required parameter 'shopOfferId' is set
        if (shopOfferId == null) {
            throw new ApiException("Missing the required parameter 'shopOfferId' when calling useShopOffer(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling useShopOffer(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling useShopOffer(Async)");
        }
        

        okhttp3.Call localVarCall = useShopOfferCall(shopId, shopOfferId, xAuthorization, xPassword, _callback);
        return localVarCall;

    }

    /**
     * Use shop offer
     * Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided shop offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel useShopOffer(String shopId, String shopOfferId, String xAuthorization, String xPassword) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = useShopOfferWithHttpInfo(shopId, shopOfferId, xAuthorization, xPassword);
        return localVarResp.getData();
    }

    /**
     * Use shop offer
     * Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided shop offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> useShopOfferWithHttpInfo(String shopId, String shopOfferId, String xAuthorization, String xPassword) throws ApiException {
        okhttp3.Call localVarCall = useShopOfferValidateBeforeCall(shopId, shopOfferId, xAuthorization, xPassword, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use shop offer (asynchronously)
     * Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param shopOfferId Any offer id for the shop. Zero, or a positive integer. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully used provided shop offer. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useShopOfferAsync(String shopId, String shopOfferId, String xAuthorization, String xPassword, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = useShopOfferValidateBeforeCall(shopId, shopOfferId, xAuthorization, xPassword, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawFromShop
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromShopRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawFromShopCall(String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = withdrawFromShopRequest;

        // create path and map variables
        String localVarPath = "/v1/shops/{shopId}/withdrawals"
            .replaceAll("\\{" + "shopId" + "\\}", localVarApiClient.escapeString(shopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawFromShopValidateBeforeCall(String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling withdrawFromShop(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling withdrawFromShop(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling withdrawFromShop(Async)");
        }
        
        // verify the required parameter 'withdrawFromShopRequest' is set
        if (withdrawFromShopRequest == null) {
            throw new ApiException("Missing the required parameter 'withdrawFromShopRequest' when calling withdrawFromShop(Async)");
        }
        

        okhttp3.Call localVarCall = withdrawFromShopCall(shopId, xAuthorization, xPassword, withdrawFromShopRequest, _callback);
        return localVarCall;

    }

    /**
     * Withdraw from shop
     * Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromShopRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel withdrawFromShop(String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = withdrawFromShopWithHttpInfo(shopId, xAuthorization, xPassword, withdrawFromShopRequest);
        return localVarResp.getData();
    }

    /**
     * Withdraw from shop
     * Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromShopRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> withdrawFromShopWithHttpInfo(String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest) throws ApiException {
        okhttp3.Call localVarCall = withdrawFromShopValidateBeforeCall(shopId, xAuthorization, xPassword, withdrawFromShopRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Withdraw from shop (asynchronously)
     * Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
     * @param shopId Any shop id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param withdrawFromShopRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully performed a withdrawal to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawFromShopAsync(String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawFromShopValidateBeforeCall(shopId, xAuthorization, xPassword, withdrawFromShopRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
