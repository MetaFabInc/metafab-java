/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchTransferCurrencyRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.BurnCurrencyRequest;
import org.openapitools.client.model.CreateCurrency200Response;
import org.openapitools.client.model.CreateCurrencyRequest;
import org.openapitools.client.model.GetCurrencies200ResponseInner;
import org.openapitools.client.model.GetCurrencyFees200Response;
import org.openapitools.client.model.MintCurrencyRequest;
import org.openapitools.client.model.SetCurrencyFeesRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.TransferCurrencyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CurrenciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrenciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrenciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchTransferCurrency
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCurrencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amounts to the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchTransferCurrencyCall(String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchTransferCurrencyRequest;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/batchTransfers"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchTransferCurrencyValidateBeforeCall(String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling batchTransferCurrency(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling batchTransferCurrency(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling batchTransferCurrency(Async)");
        }
        
        // verify the required parameter 'batchTransferCurrencyRequest' is set
        if (batchTransferCurrencyRequest == null) {
            throw new ApiException("Missing the required parameter 'batchTransferCurrencyRequest' when calling batchTransferCurrency(Async)");
        }
        

        okhttp3.Call localVarCall = batchTransferCurrencyCall(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest, _callback);
        return localVarCall;

    }

    /**
     * Batch transfer currency
     * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with &#x60;addresses&#x60; getting &#x60;amounts&#x60; order priority first. Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCurrencyRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amounts to the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel batchTransferCurrency(String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = batchTransferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest);
        return localVarResp.getData();
    }

    /**
     * Batch transfer currency
     * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with &#x60;addresses&#x60; getting &#x60;amounts&#x60; order priority first. Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCurrencyRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amounts to the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> batchTransferCurrencyWithHttpInfo(String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest) throws ApiException {
        okhttp3.Call localVarCall = batchTransferCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch transfer currency (asynchronously)
     * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with &#x60;addresses&#x60; getting &#x60;amounts&#x60; order priority first. Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param batchTransferCurrencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amounts to the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchTransferCurrencyAsync(String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchTransferCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for burnCurrency
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCurrencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the currency amount from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call burnCurrencyCall(String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = burnCurrencyRequest;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/burns"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call burnCurrencyValidateBeforeCall(String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling burnCurrency(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling burnCurrency(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling burnCurrency(Async)");
        }
        
        // verify the required parameter 'burnCurrencyRequest' is set
        if (burnCurrencyRequest == null) {
            throw new ApiException("Missing the required parameter 'burnCurrencyRequest' when calling burnCurrency(Async)");
        }
        

        okhttp3.Call localVarCall = burnCurrencyCall(currencyId, xAuthorization, xPassword, burnCurrencyRequest, _callback);
        return localVarCall;

    }

    /**
     * Burn currency
     * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCurrencyRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the currency amount from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel burnCurrency(String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = burnCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, burnCurrencyRequest);
        return localVarResp.getData();
    }

    /**
     * Burn currency
     * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCurrencyRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the currency amount from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> burnCurrencyWithHttpInfo(String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest) throws ApiException {
        okhttp3.Call localVarCall = burnCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, burnCurrencyRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Burn currency (asynchronously)
     * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param burnCurrencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed (burned) the currency amount from the authenticating game or player&#39;s wallet. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call burnCurrencyAsync(String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = burnCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, burnCurrencyRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCurrency
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCurrencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new currency and deployed its associated ERC20 token contract on the chain specified. Returns a currency object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrencyCall(String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCurrencyRequest;

        // create path and map variables
        String localVarPath = "/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCurrencyValidateBeforeCall(String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling createCurrency(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling createCurrency(Async)");
        }
        
        // verify the required parameter 'createCurrencyRequest' is set
        if (createCurrencyRequest == null) {
            throw new ApiException("Missing the required parameter 'createCurrencyRequest' when calling createCurrency(Async)");
        }
        

        okhttp3.Call localVarCall = createCurrencyCall(xAuthorization, xPassword, createCurrencyRequest, _callback);
        return localVarCall;

    }

    /**
     * Create currency
     * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCurrencyRequest  (required)
     * @return CreateCurrency200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new currency and deployed its associated ERC20 token contract on the chain specified. Returns a currency object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCurrency200Response createCurrency(String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest) throws ApiException {
        ApiResponse<CreateCurrency200Response> localVarResp = createCurrencyWithHttpInfo(xAuthorization, xPassword, createCurrencyRequest);
        return localVarResp.getData();
    }

    /**
     * Create currency
     * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCurrencyRequest  (required)
     * @return ApiResponse&lt;CreateCurrency200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new currency and deployed its associated ERC20 token contract on the chain specified. Returns a currency object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCurrency200Response> createCurrencyWithHttpInfo(String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest) throws ApiException {
        okhttp3.Call localVarCall = createCurrencyValidateBeforeCall(xAuthorization, xPassword, createCurrencyRequest, null);
        Type localVarReturnType = new TypeToken<CreateCurrency200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create currency (asynchronously)
     * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param createCurrencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new currency and deployed its associated ERC20 token contract on the chain specified. Returns a currency object containing a contract property with the deployment transaction. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrencyAsync(String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest, final ApiCallback<CreateCurrency200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCurrencyValidateBeforeCall(xAuthorization, xPassword, createCurrencyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCurrency200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencies
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of currencies for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGameKey != null) {
            localVarHeaderParams.put("X-Game-Key", localVarApiClient.parameterToString(xGameKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesValidateBeforeCall(String xGameKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xGameKey' is set
        if (xGameKey == null) {
            throw new ApiException("Missing the required parameter 'xGameKey' when calling getCurrencies(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrenciesCall(xGameKey, _callback);
        return localVarCall;

    }

    /**
     * Get currencies
     * Returns an array of active currencies for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return List&lt;GetCurrencies200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of currencies for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetCurrencies200ResponseInner> getCurrencies(String xGameKey) throws ApiException {
        ApiResponse<List<GetCurrencies200ResponseInner>> localVarResp = getCurrenciesWithHttpInfo(xGameKey);
        return localVarResp.getData();
    }

    /**
     * Get currencies
     * Returns an array of active currencies for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @return ApiResponse&lt;List&lt;GetCurrencies200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of currencies for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetCurrencies200ResponseInner>> getCurrenciesWithHttpInfo(String xGameKey) throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(xGameKey, null);
        Type localVarReturnType = new TypeToken<List<GetCurrencies200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currencies (asynchronously)
     * Returns an array of active currencies for the game associated with the provided &#x60;X-Game-Key&#x60;.
     * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an array of currencies for the game associated with the provided &#x60;X-Game-Key&#x60; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesAsync(String xGameKey, final ApiCallback<List<GetCurrencies200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(xGameKey, _callback);
        Type localVarReturnType = new TypeToken<List<GetCurrencies200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencyBalances
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab ecosystem. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balance for the provided address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyBalancesCall(String currencyId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/balances"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyBalancesValidateBeforeCall(String currencyId, String address, String walletId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling getCurrencyBalances(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrencyBalancesCall(currencyId, address, walletId, _callback);
        return localVarCall;

    }

    /**
     * Get currency balance
     * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab ecosystem. (optional)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balance for the provided address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public BigDecimal getCurrencyBalances(String currencyId, String address, String walletId) throws ApiException {
        ApiResponse<BigDecimal> localVarResp = getCurrencyBalancesWithHttpInfo(currencyId, address, walletId);
        return localVarResp.getData();
    }

    /**
     * Get currency balance
     * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab ecosystem. (optional)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balance for the provided address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BigDecimal> getCurrencyBalancesWithHttpInfo(String currencyId, String address, String walletId) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyBalancesValidateBeforeCall(currencyId, address, walletId, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency balance (asynchronously)
     * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param walletId Any wallet id within the MetaFab ecosystem. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency balance for the provided address or walletId. Balance is returned as a string to handle uint256 numbers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyBalancesAsync(String currencyId, String address, String walletId, final ApiCallback<BigDecimal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyBalancesValidateBeforeCall(currencyId, address, walletId, _callback);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencyFees
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency fees for the currency of the provided currencyId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyFeesCall(String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/fees"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyFeesValidateBeforeCall(String currencyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling getCurrencyFees(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrencyFeesCall(currencyId, _callback);
        return localVarCall;

    }

    /**
     * Get currency fees
     * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @return GetCurrencyFees200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency fees for the currency of the provided currencyId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrencyFees200Response getCurrencyFees(String currencyId) throws ApiException {
        ApiResponse<GetCurrencyFees200Response> localVarResp = getCurrencyFeesWithHttpInfo(currencyId);
        return localVarResp.getData();
    }

    /**
     * Get currency fees
     * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @return ApiResponse&lt;GetCurrencyFees200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency fees for the currency of the provided currencyId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCurrencyFees200Response> getCurrencyFeesWithHttpInfo(String currencyId) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyFeesValidateBeforeCall(currencyId, null);
        Type localVarReturnType = new TypeToken<GetCurrencyFees200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency fees (asynchronously)
     * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved currency fees for the currency of the provided currencyId. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyFeesAsync(String currencyId, final ApiCallback<GetCurrencyFees200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyFeesValidateBeforeCall(currencyId, _callback);
        Type localVarReturnType = new TypeToken<GetCurrencyFees200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mintCurrency
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCurrencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the currency amount to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mintCurrencyCall(String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mintCurrencyRequest;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/mints"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mintCurrencyValidateBeforeCall(String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling mintCurrency(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling mintCurrency(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling mintCurrency(Async)");
        }
        
        // verify the required parameter 'mintCurrencyRequest' is set
        if (mintCurrencyRequest == null) {
            throw new ApiException("Missing the required parameter 'mintCurrencyRequest' when calling mintCurrency(Async)");
        }
        

        okhttp3.Call localVarCall = mintCurrencyCall(currencyId, xAuthorization, xPassword, mintCurrencyRequest, _callback);
        return localVarCall;

    }

    /**
     * Mint currency
     * Creates (mints) the provided amount of currency  to the provided wallet address or wallet address associated with the provided walletId.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCurrencyRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the currency amount to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel mintCurrency(String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = mintCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, mintCurrencyRequest);
        return localVarResp.getData();
    }

    /**
     * Mint currency
     * Creates (mints) the provided amount of currency  to the provided wallet address or wallet address associated with the provided walletId.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCurrencyRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the currency amount to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> mintCurrencyWithHttpInfo(String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest) throws ApiException {
        okhttp3.Call localVarCall = mintCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, mintCurrencyRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mint currency (asynchronously)
     * Creates (mints) the provided amount of currency  to the provided wallet address or wallet address associated with the provided walletId.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param mintCurrencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created (minted) the currency amount to the provided wallet address or wallet address of the provided walletId. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mintCurrencyAsync(String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = mintCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, mintCurrencyRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCurrencyFees
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCurrencyFeesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfuly set the currency&#39;s fees. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCurrencyFeesCall(String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setCurrencyFeesRequest;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/fees"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCurrencyFeesValidateBeforeCall(String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling setCurrencyFees(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling setCurrencyFees(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling setCurrencyFees(Async)");
        }
        
        // verify the required parameter 'setCurrencyFeesRequest' is set
        if (setCurrencyFeesRequest == null) {
            throw new ApiException("Missing the required parameter 'setCurrencyFeesRequest' when calling setCurrencyFees(Async)");
        }
        

        okhttp3.Call localVarCall = setCurrencyFeesCall(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest, _callback);
        return localVarCall;

    }

    /**
     * Set currency fees
     * Sets the recipient address, basis points, fixed amount and cap amount for a currency&#39;s fees.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCurrencyFeesRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfuly set the currency&#39;s fees. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel setCurrencyFees(String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = setCurrencyFeesWithHttpInfo(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest);
        return localVarResp.getData();
    }

    /**
     * Set currency fees
     * Sets the recipient address, basis points, fixed amount and cap amount for a currency&#39;s fees.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCurrencyFeesRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfuly set the currency&#39;s fees. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> setCurrencyFeesWithHttpInfo(String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest) throws ApiException {
        okhttp3.Call localVarCall = setCurrencyFeesValidateBeforeCall(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set currency fees (asynchronously)
     * Sets the recipient address, basis points, fixed amount and cap amount for a currency&#39;s fees.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param setCurrencyFeesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfuly set the currency&#39;s fees. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCurrencyFeesAsync(String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCurrencyFeesValidateBeforeCall(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCurrency
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCurrencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amount to the provided wallet address or wallet address of the provided wallet Id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCurrencyCall(String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCurrencyRequest;

        // create path and map variables
        String localVarPath = "/v1/currencies/{currencyId}/transfers"
            .replaceAll("\\{" + "currencyId" + "\\}", localVarApiClient.escapeString(currencyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthorization != null) {
            localVarHeaderParams.put("X-Authorization", localVarApiClient.parameterToString(xAuthorization));
        }

        if (xPassword != null) {
            localVarHeaderParams.put("X-Password", localVarApiClient.parameterToString(xPassword));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCurrencyValidateBeforeCall(String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyId' is set
        if (currencyId == null) {
            throw new ApiException("Missing the required parameter 'currencyId' when calling transferCurrency(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling transferCurrency(Async)");
        }
        
        // verify the required parameter 'xPassword' is set
        if (xPassword == null) {
            throw new ApiException("Missing the required parameter 'xPassword' when calling transferCurrency(Async)");
        }
        
        // verify the required parameter 'transferCurrencyRequest' is set
        if (transferCurrencyRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCurrencyRequest' when calling transferCurrency(Async)");
        }
        

        okhttp3.Call localVarCall = transferCurrencyCall(currencyId, xAuthorization, xPassword, transferCurrencyRequest, _callback);
        return localVarCall;

    }

    /**
     * Transfer currency
     * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCurrencyRequest  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amount to the provided wallet address or wallet address of the provided wallet Id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionModel transferCurrency(String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest) throws ApiException {
        ApiResponse<TransactionModel> localVarResp = transferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, transferCurrencyRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer currency
     * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCurrencyRequest  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amount to the provided wallet address or wallet address of the provided wallet Id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionModel> transferCurrencyWithHttpInfo(String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, transferCurrencyRequest, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer currency (asynchronously)
     * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
     * @param currencyId Any currency id within the MetaFab ecosystem. (required)
     * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param transferCurrencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred the currency amount to the provided wallet address or wallet address of the provided wallet Id. Returns a transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An API level error occurred. This is often due to problematic data being provided by you. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferCurrencyAsync(String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest, final ApiCallback<TransactionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCurrencyValidateBeforeCall(currencyId, xAuthorization, xPassword, transferCurrencyRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
