/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * BatchMintCollectionItemsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T15:10:52.708628-08:00[America/Los_Angeles]")
public class BatchMintCollectionItemsRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ITEM_IDS = "itemIds";
  @SerializedName(SERIALIZED_NAME_ITEM_IDS)
  private List<Integer> itemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITIES = "quantities";
  @SerializedName(SERIALIZED_NAME_QUANTITIES)
  private List<Integer> quantities = new ArrayList<>();

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public BatchMintCollectionItemsRequest() {
  }

  public BatchMintCollectionItemsRequest address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * A valid EVM based address to create (mint) the items for. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid EVM based address to create (mint) the items for. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public BatchMintCollectionItemsRequest itemIds(List<Integer> itemIds) {
    
    this.itemIds = itemIds;
    return this;
  }

  public BatchMintCollectionItemsRequest addItemIdsItem(Integer itemIdsItem) {
    this.itemIds.add(itemIdsItem);
    return this;
  }

   /**
   * An array of unique itemIds to create (mint).
   * @return itemIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of unique itemIds to create (mint).")

  public List<Integer> getItemIds() {
    return itemIds;
  }


  public void setItemIds(List<Integer> itemIds) {
    this.itemIds = itemIds;
  }


  public BatchMintCollectionItemsRequest quantities(List<Integer> quantities) {
    
    this.quantities = quantities;
    return this;
  }

  public BatchMintCollectionItemsRequest addQuantitiesItem(Integer quantitiesItem) {
    this.quantities.add(quantitiesItem);
    return this;
  }

   /**
   * An array of the quantities of each of the unique itemIds provided to create (mint). The quantity of each itemId in itemIds should be at the same index as the specific itemId in the itemIds array. For example, quantities[2] defines the quantity to mint for itemIds[2], etc.
   * @return quantities
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of the quantities of each of the unique itemIds provided to create (mint). The quantity of each itemId in itemIds should be at the same index as the specific itemId in the itemIds array. For example, quantities[2] defines the quantity to mint for itemIds[2], etc.")

  public List<Integer> getQuantities() {
    return quantities;
  }


  public void setQuantities(List<Integer> quantities) {
    this.quantities = quantities;
  }


  public BatchMintCollectionItemsRequest walletId(String walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Any wallet id within the MetaFab ecosystem to create (mint) the items for.
   * @return walletId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any wallet id within the MetaFab ecosystem to create (mint) the items for.")

  public String getWalletId() {
    return walletId;
  }


  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchMintCollectionItemsRequest batchMintCollectionItemsRequest = (BatchMintCollectionItemsRequest) o;
    return Objects.equals(this.address, batchMintCollectionItemsRequest.address) &&
        Objects.equals(this.itemIds, batchMintCollectionItemsRequest.itemIds) &&
        Objects.equals(this.quantities, batchMintCollectionItemsRequest.quantities) &&
        Objects.equals(this.walletId, batchMintCollectionItemsRequest.walletId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, itemIds, quantities, walletId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchMintCollectionItemsRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    itemIds: ").append(toIndentedString(itemIds)).append("\n");
    sb.append("    quantities: ").append(toIndentedString(quantities)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("itemIds");
    openapiFields.add("quantities");
    openapiFields.add("walletId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("itemIds");
    openapiRequiredFields.add("quantities");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BatchMintCollectionItemsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BatchMintCollectionItemsRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchMintCollectionItemsRequest is not found in the empty JSON string", BatchMintCollectionItemsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BatchMintCollectionItemsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchMintCollectionItemsRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchMintCollectionItemsRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("itemIds") != null && !jsonObj.get("itemIds").isJsonNull()) && !jsonObj.get("itemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemIds` to be an array in the JSON string but got `%s`", jsonObj.get("itemIds").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("quantities") != null && !jsonObj.get("quantities").isJsonNull()) && !jsonObj.get("quantities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantities` to be an array in the JSON string but got `%s`", jsonObj.get("quantities").toString()));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchMintCollectionItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchMintCollectionItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchMintCollectionItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchMintCollectionItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchMintCollectionItemsRequest>() {
           @Override
           public void write(JsonWriter out, BatchMintCollectionItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchMintCollectionItemsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BatchMintCollectionItemsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BatchMintCollectionItemsRequest
  * @throws IOException if the JSON string is invalid with respect to BatchMintCollectionItemsRequest
  */
  public static BatchMintCollectionItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchMintCollectionItemsRequest.class);
  }

 /**
  * Convert an instance of BatchMintCollectionItemsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

