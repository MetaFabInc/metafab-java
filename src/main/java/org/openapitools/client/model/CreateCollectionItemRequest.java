/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.43
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CreateCollectionItemRequestAttributesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * CreateCollectionItemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-05T17:09:52.575349-07:00[America/Los_Angeles]")
public class CreateCollectionItemRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMAGE_BASE64 = "imageBase64";
  @SerializedName(SERIALIZED_NAME_IMAGE_BASE64)
  private byte[] imageBase64;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private URI imageUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "externalUrl";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private URI externalUrl;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CreateCollectionItemRequestAttributesInner> attributes = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public CreateCollectionItemRequest() {
  }

  public CreateCollectionItemRequest id(BigDecimal id) {
    
    this.id = id;
    return this;
  }

   /**
   * A unique itemId to use for this item within the collection. If an existing itemId is used, the current metadata will be overriden. Any number may be used.  The terms &#x60;itemId&#x60; and &#x60;collectionItemId&#x60; are used interchangeably and equivalent to one another throughout MetaFab documentation.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1337", required = true, value = "A unique itemId to use for this item within the collection. If an existing itemId is used, the current metadata will be overriden. Any number may be used.  The terms `itemId` and `collectionItemId` are used interchangeably and equivalent to one another throughout MetaFab documentation.")

  public BigDecimal getId() {
    return id;
  }


  public void setId(BigDecimal id) {
    this.id = id;
  }


  public CreateCollectionItemRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this item.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Fire Dagger", required = true, value = "The name of this item.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CreateCollectionItemRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A text description of this item. This is a great spot to include lore, game mechanics and more related to this item.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A text description of this item. This is a great spot to include lore, game mechanics and more related to this item.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CreateCollectionItemRequest imageBase64(byte[] imageBase64) {
    
    this.imageBase64 = imageBase64;
    return this;
  }

   /**
   * A base64 string of the image for this item. Either &#x60;imageBase64&#x60; or &#x60;imageUrl&#x60; must be provided. Supported image formats are &#x60;jpg&#x60;, &#x60;jpeg&#x60;, &#x60;png&#x60;, &#x60;gif&#x60;. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.
   * @return imageBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A base64 string of the image for this item. Either `imageBase64` or `imageUrl` must be provided. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.")

  public byte[] getImageBase64() {
    return imageBase64;
  }


  public void setImageBase64(byte[] imageBase64) {
    this.imageBase64 = imageBase64;
  }


  public CreateCollectionItemRequest imageUrl(URI imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * An external url that resolves to an image to use for this item. This can also be set to an ipfs:// uri. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mycdn.mygame.com/example/item1.gif", value = "An external url that resolves to an image to use for this item. This can also be set to an ipfs:// uri. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.")

  public URI getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(URI imageUrl) {
    this.imageUrl = imageUrl;
  }


  public CreateCollectionItemRequest externalUrl(URI externalUrl) {
    
    this.externalUrl = externalUrl;
    return this;
  }

   /**
   * An optional URL where players can go to learn more about this item specifically, or your game, or any other link.
   * @return externalUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional URL where players can go to learn more about this item specifically, or your game, or any other link.")

  public URI getExternalUrl() {
    return externalUrl;
  }


  public void setExternalUrl(URI externalUrl) {
    this.externalUrl = externalUrl;
  }


  public CreateCollectionItemRequest attributes(List<CreateCollectionItemRequestAttributesInner> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public CreateCollectionItemRequest addAttributesItem(CreateCollectionItemRequestAttributesInner attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * An array of objects that conform with the [metadata attributes standard that can be found here](https://docs.opensea.io/docs/metadata-standards#attributes)
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of objects that conform with the [metadata attributes standard that can be found here](https://docs.opensea.io/docs/metadata-standards#attributes)")

  public List<CreateCollectionItemRequestAttributesInner> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CreateCollectionItemRequestAttributesInner> attributes) {
    this.attributes = attributes;
  }


  public CreateCollectionItemRequest data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * An arbitrary object of data attached to the top level metadata object. This is useful for including data or resource URLs specific to your game. Such as URLs that point to 3D models, music files, bitmaps, or anything else you need to reference.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An arbitrary object of data attached to the top level metadata object. This is useful for including data or resource URLs specific to your game. Such as URLs that point to 3D models, music files, bitmaps, or anything else you need to reference.")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCollectionItemRequest createCollectionItemRequest = (CreateCollectionItemRequest) o;
    return Objects.equals(this.id, createCollectionItemRequest.id) &&
        Objects.equals(this.name, createCollectionItemRequest.name) &&
        Objects.equals(this.description, createCollectionItemRequest.description) &&
        Arrays.equals(this.imageBase64, createCollectionItemRequest.imageBase64) &&
        Objects.equals(this.imageUrl, createCollectionItemRequest.imageUrl) &&
        Objects.equals(this.externalUrl, createCollectionItemRequest.externalUrl) &&
        Objects.equals(this.attributes, createCollectionItemRequest.attributes) &&
        Objects.equals(this.data, createCollectionItemRequest.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, Arrays.hashCode(imageBase64), imageUrl, externalUrl, attributes, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCollectionItemRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    imageBase64: ").append(toIndentedString(imageBase64)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("imageBase64");
    openapiFields.add("imageUrl");
    openapiFields.add("externalUrl");
    openapiFields.add("attributes");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("description");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateCollectionItemRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CreateCollectionItemRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCollectionItemRequest is not found in the empty JSON string", CreateCollectionItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateCollectionItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCollectionItemRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCollectionItemRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("externalUrl") != null && !jsonObj.get("externalUrl").isJsonNull()) && !jsonObj.get("externalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalUrl").toString()));
      }
      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      if (jsonArrayattributes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("attributes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
        }

        // validate the optional field `attributes` (array)
        for (int i = 0; i < jsonArrayattributes.size(); i++) {
          CreateCollectionItemRequestAttributesInner.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCollectionItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCollectionItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCollectionItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCollectionItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCollectionItemRequest>() {
           @Override
           public void write(JsonWriter out, CreateCollectionItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCollectionItemRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateCollectionItemRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateCollectionItemRequest
  * @throws IOException if the JSON string is invalid with respect to CreateCollectionItemRequest
  */
  public static CreateCollectionItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCollectionItemRequest.class);
  }

 /**
  * Convert an instance of CreateCollectionItemRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

