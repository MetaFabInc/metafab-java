/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * EcosystemModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T17:38:27.237153-05:00[America/New_York]")
public class EcosystemModel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ICON_IMAGE_URL = "iconImageUrl";
  @SerializedName(SERIALIZED_NAME_ICON_IMAGE_URL)
  private String iconImageUrl;

  public static final String SERIALIZED_NAME_COVER_IMAGE_URL = "coverImageUrl";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE_URL)
  private String coverImageUrl;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR_HEX = "primaryColorHex";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR_HEX)
  private String primaryColorHex;

  public static final String SERIALIZED_NAME_PUBLISHED_KEY = "publishedKey";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_KEY)
  private String publishedKey;

  public static final String SERIALIZED_NAME_SECRET_KEY = "secretKey";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY)
  private String secretKey;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public EcosystemModel() {
  }

  public EcosystemModel id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public EcosystemModel email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public EcosystemModel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EcosystemModel iconImageUrl(String iconImageUrl) {
    
    this.iconImageUrl = iconImageUrl;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return iconImageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getIconImageUrl() {
    return iconImageUrl;
  }


  public void setIconImageUrl(String iconImageUrl) {
    this.iconImageUrl = iconImageUrl;
  }


  public EcosystemModel coverImageUrl(String coverImageUrl) {
    
    this.coverImageUrl = coverImageUrl;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return coverImageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getCoverImageUrl() {
    return coverImageUrl;
  }


  public void setCoverImageUrl(String coverImageUrl) {
    this.coverImageUrl = coverImageUrl;
  }


  public EcosystemModel primaryColorHex(String primaryColorHex) {
    
    this.primaryColorHex = primaryColorHex;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return primaryColorHex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getPrimaryColorHex() {
    return primaryColorHex;
  }


  public void setPrimaryColorHex(String primaryColorHex) {
    this.primaryColorHex = primaryColorHex;
  }


  public EcosystemModel publishedKey(String publishedKey) {
    
    this.publishedKey = publishedKey;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return publishedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getPublishedKey() {
    return publishedKey;
  }


  public void setPublishedKey(String publishedKey) {
    this.publishedKey = publishedKey;
  }


  public EcosystemModel secretKey(String secretKey) {
    
    this.secretKey = secretKey;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return secretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getSecretKey() {
    return secretKey;
  }


  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }


  public EcosystemModel updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public EcosystemModel createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * This field has not had a description added.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field has not had a description added.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcosystemModel ecosystemModel = (EcosystemModel) o;
    return Objects.equals(this.id, ecosystemModel.id) &&
        Objects.equals(this.email, ecosystemModel.email) &&
        Objects.equals(this.name, ecosystemModel.name) &&
        Objects.equals(this.iconImageUrl, ecosystemModel.iconImageUrl) &&
        Objects.equals(this.coverImageUrl, ecosystemModel.coverImageUrl) &&
        Objects.equals(this.primaryColorHex, ecosystemModel.primaryColorHex) &&
        Objects.equals(this.publishedKey, ecosystemModel.publishedKey) &&
        Objects.equals(this.secretKey, ecosystemModel.secretKey) &&
        Objects.equals(this.updatedAt, ecosystemModel.updatedAt) &&
        Objects.equals(this.createdAt, ecosystemModel.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, name, iconImageUrl, coverImageUrl, primaryColorHex, publishedKey, secretKey, updatedAt, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcosystemModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    iconImageUrl: ").append(toIndentedString(iconImageUrl)).append("\n");
    sb.append("    coverImageUrl: ").append(toIndentedString(coverImageUrl)).append("\n");
    sb.append("    primaryColorHex: ").append(toIndentedString(primaryColorHex)).append("\n");
    sb.append("    publishedKey: ").append(toIndentedString(publishedKey)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("name");
    openapiFields.add("iconImageUrl");
    openapiFields.add("coverImageUrl");
    openapiFields.add("primaryColorHex");
    openapiFields.add("publishedKey");
    openapiFields.add("secretKey");
    openapiFields.add("updatedAt");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EcosystemModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EcosystemModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcosystemModel is not found in the empty JSON string", EcosystemModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EcosystemModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcosystemModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("iconImageUrl") != null && !jsonObj.get("iconImageUrl").isJsonNull()) && !jsonObj.get("iconImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconImageUrl").toString()));
      }
      if ((jsonObj.get("coverImageUrl") != null && !jsonObj.get("coverImageUrl").isJsonNull()) && !jsonObj.get("coverImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverImageUrl").toString()));
      }
      if ((jsonObj.get("primaryColorHex") != null && !jsonObj.get("primaryColorHex").isJsonNull()) && !jsonObj.get("primaryColorHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryColorHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryColorHex").toString()));
      }
      if ((jsonObj.get("publishedKey") != null && !jsonObj.get("publishedKey").isJsonNull()) && !jsonObj.get("publishedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishedKey").toString()));
      }
      if ((jsonObj.get("secretKey") != null && !jsonObj.get("secretKey").isJsonNull()) && !jsonObj.get("secretKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretKey").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcosystemModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcosystemModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcosystemModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcosystemModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EcosystemModel>() {
           @Override
           public void write(JsonWriter out, EcosystemModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcosystemModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EcosystemModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EcosystemModel
  * @throws IOException if the JSON string is invalid with respect to EcosystemModel
  */
  public static EcosystemModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcosystemModel.class);
  }

 /**
  * Convert an instance of EcosystemModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

