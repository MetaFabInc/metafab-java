/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * SetLootboxManagerLootboxRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-02T19:20:23.322985-08:00[America/Los_Angeles]")
public class SetLootboxManagerLootboxRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INPUT_COLLECTION_ADDRESS = "inputCollectionAddress";
  @SerializedName(SERIALIZED_NAME_INPUT_COLLECTION_ADDRESS)
  private String inputCollectionAddress;

  public static final String SERIALIZED_NAME_INPUT_COLLECTION_ID = "inputCollectionId";
  @SerializedName(SERIALIZED_NAME_INPUT_COLLECTION_ID)
  private String inputCollectionId;

  public static final String SERIALIZED_NAME_INPUT_COLLECTION_ITEM_IDS = "inputCollectionItemIds";
  @SerializedName(SERIALIZED_NAME_INPUT_COLLECTION_ITEM_IDS)
  private List<Integer> inputCollectionItemIds = null;

  public static final String SERIALIZED_NAME_INPUT_COLLECTION_ITEM_AMOUNTS = "inputCollectionItemAmounts";
  @SerializedName(SERIALIZED_NAME_INPUT_COLLECTION_ITEM_AMOUNTS)
  private List<Integer> inputCollectionItemAmounts = null;

  public static final String SERIALIZED_NAME_OUTPUT_COLLECTION_ADDRESS = "outputCollectionAddress";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COLLECTION_ADDRESS)
  private String outputCollectionAddress;

  public static final String SERIALIZED_NAME_OUTPUT_COLLECTION_ID = "outputCollectionId";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COLLECTION_ID)
  private String outputCollectionId;

  public static final String SERIALIZED_NAME_OUTPUT_COLLECTION_ITEM_IDS = "outputCollectionItemIds";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COLLECTION_ITEM_IDS)
  private List<Integer> outputCollectionItemIds = null;

  public static final String SERIALIZED_NAME_OUTPUT_COLLECTION_ITEM_AMOUNTS = "outputCollectionItemAmounts";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COLLECTION_ITEM_AMOUNTS)
  private List<Integer> outputCollectionItemAmounts = null;

  public static final String SERIALIZED_NAME_OUTPUT_COLLECTION_ITEM_WEIGHTS = "outputCollectionItemWeights";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COLLECTION_ITEM_WEIGHTS)
  private List<Integer> outputCollectionItemWeights = null;

  public static final String SERIALIZED_NAME_OUTPUT_TOTAL_ITEMS = "outputTotalItems";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TOTAL_ITEMS)
  private Integer outputTotalItems;

  public SetLootboxManagerLootboxRequest() {
  }

  public SetLootboxManagerLootboxRequest id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * A unique lootbox id to use for this lootbox for the lootbox manager. If an existing lootbox id is used, the current lootbox will be updated but the existing number of opens will be kept. If you want to reset the number of opens for an existing lootbox, first remove it using the remove lootbox endpoint, then set it.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1337", required = true, value = "A unique lootbox id to use for this lootbox for the lootbox manager. If an existing lootbox id is used, the current lootbox will be updated but the existing number of opens will be kept. If you want to reset the number of opens for an existing lootbox, first remove it using the remove lootbox endpoint, then set it.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public SetLootboxManagerLootboxRequest inputCollectionAddress(String inputCollectionAddress) {
    
    this.inputCollectionAddress = inputCollectionAddress;
    return this;
  }

   /**
   * A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for input items required by this lootbox. &#x60;inputCollectionAddress&#x60; or &#x60;inputCollectionId&#x60; can optionally be provided.
   * @return inputCollectionAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for input items required by this lootbox. `inputCollectionAddress` or `inputCollectionId` can optionally be provided.")

  public String getInputCollectionAddress() {
    return inputCollectionAddress;
  }


  public void setInputCollectionAddress(String inputCollectionAddress) {
    this.inputCollectionAddress = inputCollectionAddress;
  }


  public SetLootboxManagerLootboxRequest inputCollectionId(String inputCollectionId) {
    
    this.inputCollectionId = inputCollectionId;
    return this;
  }

   /**
   * A valid MetaFab collection id that represents the collection for input items required by this lootbox. &#x60;inputCollectionAddress&#x60; or &#x60;inputCollectionId&#x60; can optionally be provided.
   * @return inputCollectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid MetaFab collection id that represents the collection for input items required by this lootbox. `inputCollectionAddress` or `inputCollectionId` can optionally be provided.")

  public String getInputCollectionId() {
    return inputCollectionId;
  }


  public void setInputCollectionId(String inputCollectionId) {
    this.inputCollectionId = inputCollectionId;
  }


  public SetLootboxManagerLootboxRequest inputCollectionItemIds(List<Integer> inputCollectionItemIds) {
    
    this.inputCollectionItemIds = inputCollectionItemIds;
    return this;
  }

  public SetLootboxManagerLootboxRequest addInputCollectionItemIdsItem(Integer inputCollectionItemIdsItem) {
    if (this.inputCollectionItemIds == null) {
      this.inputCollectionItemIds = new ArrayList<>();
    }
    this.inputCollectionItemIds.add(inputCollectionItemIdsItem);
    return this;
  }

   /**
   * An array of item ids from the provided input collection that are required to open this lootbox. Input items are burn upon opening a lootbox.
   * @return inputCollectionItemIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of item ids from the provided input collection that are required to open this lootbox. Input items are burn upon opening a lootbox.")

  public List<Integer> getInputCollectionItemIds() {
    return inputCollectionItemIds;
  }


  public void setInputCollectionItemIds(List<Integer> inputCollectionItemIds) {
    this.inputCollectionItemIds = inputCollectionItemIds;
  }


  public SetLootboxManagerLootboxRequest inputCollectionItemAmounts(List<Integer> inputCollectionItemAmounts) {
    
    this.inputCollectionItemAmounts = inputCollectionItemAmounts;
    return this;
  }

  public SetLootboxManagerLootboxRequest addInputCollectionItemAmountsItem(Integer inputCollectionItemAmountsItem) {
    if (this.inputCollectionItemAmounts == null) {
      this.inputCollectionItemAmounts = new ArrayList<>();
    }
    this.inputCollectionItemAmounts.add(inputCollectionItemAmountsItem);
    return this;
  }

   /**
   * An array of amounts for each item id from the provided input collection that are required to open this lootbox. Item amounts array indices are reflective of the amount required for a given item id at the same index.
   * @return inputCollectionItemAmounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of amounts for each item id from the provided input collection that are required to open this lootbox. Item amounts array indices are reflective of the amount required for a given item id at the same index.")

  public List<Integer> getInputCollectionItemAmounts() {
    return inputCollectionItemAmounts;
  }


  public void setInputCollectionItemAmounts(List<Integer> inputCollectionItemAmounts) {
    this.inputCollectionItemAmounts = inputCollectionItemAmounts;
  }


  public SetLootboxManagerLootboxRequest outputCollectionAddress(String outputCollectionAddress) {
    
    this.outputCollectionAddress = outputCollectionAddress;
    return this;
  }

   /**
   * A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for possible output items given by this lootbox. &#x60;outputCollectionAddress&#x60; or &#x60;outputCollectionId&#x60; can optionally be provided.
   * @return outputCollectionAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for possible output items given by this lootbox. `outputCollectionAddress` or `outputCollectionId` can optionally be provided.")

  public String getOutputCollectionAddress() {
    return outputCollectionAddress;
  }


  public void setOutputCollectionAddress(String outputCollectionAddress) {
    this.outputCollectionAddress = outputCollectionAddress;
  }


  public SetLootboxManagerLootboxRequest outputCollectionId(String outputCollectionId) {
    
    this.outputCollectionId = outputCollectionId;
    return this;
  }

   /**
   * A valid MetaFab collection id that represents the collection for possible output items given by this lootbox. &#x60;outputCollectionAddress&#x60; or &#x60;outputCollectionId&#x60; can optionally be provided.
   * @return outputCollectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid MetaFab collection id that represents the collection for possible output items given by this lootbox. `outputCollectionAddress` or `outputCollectionId` can optionally be provided.")

  public String getOutputCollectionId() {
    return outputCollectionId;
  }


  public void setOutputCollectionId(String outputCollectionId) {
    this.outputCollectionId = outputCollectionId;
  }


  public SetLootboxManagerLootboxRequest outputCollectionItemIds(List<Integer> outputCollectionItemIds) {
    
    this.outputCollectionItemIds = outputCollectionItemIds;
    return this;
  }

  public SetLootboxManagerLootboxRequest addOutputCollectionItemIdsItem(Integer outputCollectionItemIdsItem) {
    if (this.outputCollectionItemIds == null) {
      this.outputCollectionItemIds = new ArrayList<>();
    }
    this.outputCollectionItemIds.add(outputCollectionItemIdsItem);
    return this;
  }

   /**
   * An array of item ids from the provided output collection that are possibly given by this lootbox. Randomly selected output items are automatically minted if the lootbox manager contract has the &#x60;minter&#x60; role for the output collection contract. Otherwise, they are transferred from the item balance held by the lootbox manager contract.
   * @return outputCollectionItemIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of item ids from the provided output collection that are possibly given by this lootbox. Randomly selected output items are automatically minted if the lootbox manager contract has the `minter` role for the output collection contract. Otherwise, they are transferred from the item balance held by the lootbox manager contract.")

  public List<Integer> getOutputCollectionItemIds() {
    return outputCollectionItemIds;
  }


  public void setOutputCollectionItemIds(List<Integer> outputCollectionItemIds) {
    this.outputCollectionItemIds = outputCollectionItemIds;
  }


  public SetLootboxManagerLootboxRequest outputCollectionItemAmounts(List<Integer> outputCollectionItemAmounts) {
    
    this.outputCollectionItemAmounts = outputCollectionItemAmounts;
    return this;
  }

  public SetLootboxManagerLootboxRequest addOutputCollectionItemAmountsItem(Integer outputCollectionItemAmountsItem) {
    if (this.outputCollectionItemAmounts == null) {
      this.outputCollectionItemAmounts = new ArrayList<>();
    }
    this.outputCollectionItemAmounts.add(outputCollectionItemAmountsItem);
    return this;
  }

   /**
   * An array of amounts for each item id that can be randomly selected from the provided output collection that are given by this lootbox. Item amounts array indices are reflective of the amount required for a given item id at the same index.
   * @return outputCollectionItemAmounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of amounts for each item id that can be randomly selected from the provided output collection that are given by this lootbox. Item amounts array indices are reflective of the amount required for a given item id at the same index.")

  public List<Integer> getOutputCollectionItemAmounts() {
    return outputCollectionItemAmounts;
  }


  public void setOutputCollectionItemAmounts(List<Integer> outputCollectionItemAmounts) {
    this.outputCollectionItemAmounts = outputCollectionItemAmounts;
  }


  public SetLootboxManagerLootboxRequest outputCollectionItemWeights(List<Integer> outputCollectionItemWeights) {
    
    this.outputCollectionItemWeights = outputCollectionItemWeights;
    return this;
  }

  public SetLootboxManagerLootboxRequest addOutputCollectionItemWeightsItem(Integer outputCollectionItemWeightsItem) {
    if (this.outputCollectionItemWeights == null) {
      this.outputCollectionItemWeights = new ArrayList<>();
    }
    this.outputCollectionItemWeights.add(outputCollectionItemWeightsItem);
    return this;
  }

   /**
   * An array of weights for each item id that can be randomly selected from the provided output collection that are given by this lootbox. Any positive integer for an item&#39;s weight can be provided. The weight for an item relative to the sum of all possible item weights determines the probability that an item will be picked upon a lootbox being opened. Item weights array indices are reflective of the probability weight for a given item id at the same index.
   * @return outputCollectionItemWeights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of weights for each item id that can be randomly selected from the provided output collection that are given by this lootbox. Any positive integer for an item's weight can be provided. The weight for an item relative to the sum of all possible item weights determines the probability that an item will be picked upon a lootbox being opened. Item weights array indices are reflective of the probability weight for a given item id at the same index.")

  public List<Integer> getOutputCollectionItemWeights() {
    return outputCollectionItemWeights;
  }


  public void setOutputCollectionItemWeights(List<Integer> outputCollectionItemWeights) {
    this.outputCollectionItemWeights = outputCollectionItemWeights;
  }


  public SetLootboxManagerLootboxRequest outputTotalItems(Integer outputTotalItems) {
    
    this.outputTotalItems = outputTotalItems;
    return this;
  }

   /**
   * The number of items randomly selected from the possible output items when this lootbox is open. If you provide a value greater than 1, it is possible for the same item to be selected more than once, giving the opener more than one of that item&#39;s output from the lootbox.
   * @return outputTotalItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items randomly selected from the possible output items when this lootbox is open. If you provide a value greater than 1, it is possible for the same item to be selected more than once, giving the opener more than one of that item's output from the lootbox.")

  public Integer getOutputTotalItems() {
    return outputTotalItems;
  }


  public void setOutputTotalItems(Integer outputTotalItems) {
    this.outputTotalItems = outputTotalItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest = (SetLootboxManagerLootboxRequest) o;
    return Objects.equals(this.id, setLootboxManagerLootboxRequest.id) &&
        Objects.equals(this.inputCollectionAddress, setLootboxManagerLootboxRequest.inputCollectionAddress) &&
        Objects.equals(this.inputCollectionId, setLootboxManagerLootboxRequest.inputCollectionId) &&
        Objects.equals(this.inputCollectionItemIds, setLootboxManagerLootboxRequest.inputCollectionItemIds) &&
        Objects.equals(this.inputCollectionItemAmounts, setLootboxManagerLootboxRequest.inputCollectionItemAmounts) &&
        Objects.equals(this.outputCollectionAddress, setLootboxManagerLootboxRequest.outputCollectionAddress) &&
        Objects.equals(this.outputCollectionId, setLootboxManagerLootboxRequest.outputCollectionId) &&
        Objects.equals(this.outputCollectionItemIds, setLootboxManagerLootboxRequest.outputCollectionItemIds) &&
        Objects.equals(this.outputCollectionItemAmounts, setLootboxManagerLootboxRequest.outputCollectionItemAmounts) &&
        Objects.equals(this.outputCollectionItemWeights, setLootboxManagerLootboxRequest.outputCollectionItemWeights) &&
        Objects.equals(this.outputTotalItems, setLootboxManagerLootboxRequest.outputTotalItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inputCollectionAddress, inputCollectionId, inputCollectionItemIds, inputCollectionItemAmounts, outputCollectionAddress, outputCollectionId, outputCollectionItemIds, outputCollectionItemAmounts, outputCollectionItemWeights, outputTotalItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetLootboxManagerLootboxRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputCollectionAddress: ").append(toIndentedString(inputCollectionAddress)).append("\n");
    sb.append("    inputCollectionId: ").append(toIndentedString(inputCollectionId)).append("\n");
    sb.append("    inputCollectionItemIds: ").append(toIndentedString(inputCollectionItemIds)).append("\n");
    sb.append("    inputCollectionItemAmounts: ").append(toIndentedString(inputCollectionItemAmounts)).append("\n");
    sb.append("    outputCollectionAddress: ").append(toIndentedString(outputCollectionAddress)).append("\n");
    sb.append("    outputCollectionId: ").append(toIndentedString(outputCollectionId)).append("\n");
    sb.append("    outputCollectionItemIds: ").append(toIndentedString(outputCollectionItemIds)).append("\n");
    sb.append("    outputCollectionItemAmounts: ").append(toIndentedString(outputCollectionItemAmounts)).append("\n");
    sb.append("    outputCollectionItemWeights: ").append(toIndentedString(outputCollectionItemWeights)).append("\n");
    sb.append("    outputTotalItems: ").append(toIndentedString(outputTotalItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("inputCollectionAddress");
    openapiFields.add("inputCollectionId");
    openapiFields.add("inputCollectionItemIds");
    openapiFields.add("inputCollectionItemAmounts");
    openapiFields.add("outputCollectionAddress");
    openapiFields.add("outputCollectionId");
    openapiFields.add("outputCollectionItemIds");
    openapiFields.add("outputCollectionItemAmounts");
    openapiFields.add("outputCollectionItemWeights");
    openapiFields.add("outputTotalItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SetLootboxManagerLootboxRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SetLootboxManagerLootboxRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetLootboxManagerLootboxRequest is not found in the empty JSON string", SetLootboxManagerLootboxRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SetLootboxManagerLootboxRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetLootboxManagerLootboxRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SetLootboxManagerLootboxRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("inputCollectionAddress") != null && !jsonObj.get("inputCollectionAddress").isJsonNull()) && !jsonObj.get("inputCollectionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputCollectionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputCollectionAddress").toString()));
      }
      if ((jsonObj.get("inputCollectionId") != null && !jsonObj.get("inputCollectionId").isJsonNull()) && !jsonObj.get("inputCollectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputCollectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputCollectionId").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("inputCollectionItemIds") != null && !jsonObj.get("inputCollectionItemIds").isJsonNull()) && !jsonObj.get("inputCollectionItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputCollectionItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("inputCollectionItemIds").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("inputCollectionItemAmounts") != null && !jsonObj.get("inputCollectionItemAmounts").isJsonNull()) && !jsonObj.get("inputCollectionItemAmounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputCollectionItemAmounts` to be an array in the JSON string but got `%s`", jsonObj.get("inputCollectionItemAmounts").toString()));
      }
      if ((jsonObj.get("outputCollectionAddress") != null && !jsonObj.get("outputCollectionAddress").isJsonNull()) && !jsonObj.get("outputCollectionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputCollectionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputCollectionAddress").toString()));
      }
      if ((jsonObj.get("outputCollectionId") != null && !jsonObj.get("outputCollectionId").isJsonNull()) && !jsonObj.get("outputCollectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputCollectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputCollectionId").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("outputCollectionItemIds") != null && !jsonObj.get("outputCollectionItemIds").isJsonNull()) && !jsonObj.get("outputCollectionItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputCollectionItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("outputCollectionItemIds").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("outputCollectionItemAmounts") != null && !jsonObj.get("outputCollectionItemAmounts").isJsonNull()) && !jsonObj.get("outputCollectionItemAmounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputCollectionItemAmounts` to be an array in the JSON string but got `%s`", jsonObj.get("outputCollectionItemAmounts").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("outputCollectionItemWeights") != null && !jsonObj.get("outputCollectionItemWeights").isJsonNull()) && !jsonObj.get("outputCollectionItemWeights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputCollectionItemWeights` to be an array in the JSON string but got `%s`", jsonObj.get("outputCollectionItemWeights").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetLootboxManagerLootboxRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetLootboxManagerLootboxRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetLootboxManagerLootboxRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetLootboxManagerLootboxRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetLootboxManagerLootboxRequest>() {
           @Override
           public void write(JsonWriter out, SetLootboxManagerLootboxRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetLootboxManagerLootboxRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SetLootboxManagerLootboxRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SetLootboxManagerLootboxRequest
  * @throws IOException if the JSON string is invalid with respect to SetLootboxManagerLootboxRequest
  */
  public static SetLootboxManagerLootboxRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetLootboxManagerLootboxRequest.class);
  }

 /**
  * Convert an instance of SetLootboxManagerLootboxRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

