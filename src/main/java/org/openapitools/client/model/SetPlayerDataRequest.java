/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * SetPlayerDataRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T17:38:27.237153-05:00[America/New_York]")
public class SetPlayerDataRequest {
  public static final String SERIALIZED_NAME_PROTECTED_DATA = "protectedData";
  @SerializedName(SERIALIZED_NAME_PROTECTED_DATA)
  private Object protectedData;

  public static final String SERIALIZED_NAME_PUBLIC_DATA = "publicData";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DATA)
  private Object publicData;

  public SetPlayerDataRequest() {
  }

  public SetPlayerDataRequest protectedData(Object protectedData) {
    
    this.protectedData = protectedData;
    return this;
  }

   /**
   * protectedData can only be set if &#x60;X-Authorization&#x60; includes credentials for the game the target player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.  protectedData is great for storing sensitive player data like tracking experience points, off-chain inventories, save states, and more - things that players shouldn&#39;t have the ability to directly change themselves.
   * @return protectedData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "protectedData can only be set if `X-Authorization` includes credentials for the game the target player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.  protectedData is great for storing sensitive player data like tracking experience points, off-chain inventories, save states, and more - things that players shouldn't have the ability to directly change themselves.")

  public Object getProtectedData() {
    return protectedData;
  }


  public void setProtectedData(Object protectedData) {
    this.protectedData = protectedData;
  }


  public SetPlayerDataRequest publicData(Object publicData) {
    
    this.publicData = publicData;
    return this;
  }

   /**
   * publicData can be set if &#x60;X-Authorization&#x60; includes credentials for the target player or game the player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.  publicData is great for storing player preferences like in-game settings, non-sensitive data and more. Anything that a player should have the ability to directly change themselves without client or server verification can be stored in publicData.
   * @return publicData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "publicData can be set if `X-Authorization` includes credentials for the target player or game the player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.  publicData is great for storing player preferences like in-game settings, non-sensitive data and more. Anything that a player should have the ability to directly change themselves without client or server verification can be stored in publicData.")

  public Object getPublicData() {
    return publicData;
  }


  public void setPublicData(Object publicData) {
    this.publicData = publicData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetPlayerDataRequest setPlayerDataRequest = (SetPlayerDataRequest) o;
    return Objects.equals(this.protectedData, setPlayerDataRequest.protectedData) &&
        Objects.equals(this.publicData, setPlayerDataRequest.publicData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protectedData, publicData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetPlayerDataRequest {\n");
    sb.append("    protectedData: ").append(toIndentedString(protectedData)).append("\n");
    sb.append("    publicData: ").append(toIndentedString(publicData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("protectedData");
    openapiFields.add("publicData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SetPlayerDataRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SetPlayerDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetPlayerDataRequest is not found in the empty JSON string", SetPlayerDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SetPlayerDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetPlayerDataRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetPlayerDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetPlayerDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetPlayerDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetPlayerDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetPlayerDataRequest>() {
           @Override
           public void write(JsonWriter out, SetPlayerDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetPlayerDataRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SetPlayerDataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SetPlayerDataRequest
  * @throws IOException if the JSON string is invalid with respect to SetPlayerDataRequest
  */
  public static SetPlayerDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetPlayerDataRequest.class);
  }

 /**
  * Convert an instance of SetPlayerDataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

