/*
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * UpdateEcosystemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-19T17:38:27.237153-05:00[America/New_York]")
public class UpdateEcosystemRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_CURRENT_PASSWORD = "currentPassword";
  @SerializedName(SERIALIZED_NAME_CURRENT_PASSWORD)
  private String currentPassword;

  public static final String SERIALIZED_NAME_NEW_PASSWORD = "newPassword";
  @SerializedName(SERIALIZED_NAME_NEW_PASSWORD)
  private String newPassword;

  public static final String SERIALIZED_NAME_ICON_IMAGE_BASE64 = "iconImageBase64";
  @SerializedName(SERIALIZED_NAME_ICON_IMAGE_BASE64)
  private String iconImageBase64;

  public static final String SERIALIZED_NAME_COVER_IMAGE_BASE64 = "coverImageBase64";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE_BASE64)
  private String coverImageBase64;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR_HEX = "primaryColorHex";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR_HEX)
  private String primaryColorHex;

  public static final String SERIALIZED_NAME_RESET_PUBLISHED_KEY = "resetPublishedKey";
  @SerializedName(SERIALIZED_NAME_RESET_PUBLISHED_KEY)
  private Boolean resetPublishedKey;

  public static final String SERIALIZED_NAME_RESET_SECRET_KEY = "resetSecretKey";
  @SerializedName(SERIALIZED_NAME_RESET_SECRET_KEY)
  private Boolean resetSecretKey;

  public UpdateEcosystemRequest() {
  }

  public UpdateEcosystemRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A new name. Replaces the ecosystem&#39;s current name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A new name. Replaces the ecosystem's current name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UpdateEcosystemRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * A new email address. The ecosystem&#39;s old email will no longer be valid for account authentication. &#x60;currentPassword&#x60; must also be provided.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A new email address. The ecosystem's old email will no longer be valid for account authentication. `currentPassword` must also be provided.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public UpdateEcosystemRequest currentPassword(String currentPassword) {
    
    this.currentPassword = currentPassword;
    return this;
  }

   /**
   * The ecosystem&#39;s current password. Must be provided if setting &#x60;newPassword&#x60; or &#x60;email&#x60;.
   * @return currentPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ecosystem's current password. Must be provided if setting `newPassword` or `email`.")

  public String getCurrentPassword() {
    return currentPassword;
  }


  public void setCurrentPassword(String currentPassword) {
    this.currentPassword = currentPassword;
  }


  public UpdateEcosystemRequest newPassword(String newPassword) {
    
    this.newPassword = newPassword;
    return this;
  }

   /**
   * A new password. The ecosystem&#39;s old password will no longer be valid.
   * @return newPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A new password. The ecosystem's old password will no longer be valid.")

  public String getNewPassword() {
    return newPassword;
  }


  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public UpdateEcosystemRequest iconImageBase64(String iconImageBase64) {
    
    this.iconImageBase64 = iconImageBase64;
    return this;
  }

   /**
   * A base64 string of the icon image for this ecosystem. Supported image formats are &#x60;jpg&#x60;, &#x60;jpeg&#x60;, &#x60;png&#x60;, &#x60;gif&#x60; Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem.
   * @return iconImageBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A base64 string of the icon image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem.")

  public String getIconImageBase64() {
    return iconImageBase64;
  }


  public void setIconImageBase64(String iconImageBase64) {
    this.iconImageBase64 = iconImageBase64;
  }


  public UpdateEcosystemRequest coverImageBase64(String coverImageBase64) {
    
    this.coverImageBase64 = coverImageBase64;
    return this;
  }

   /**
   * A base64 string of the cover image for this ecosystem. Supported image formats are &#x60;jpg&#x60;, &#x60;jpeg&#x60;, &#x60;png&#x60;, &#x60;gif&#x60;. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem.
   * @return coverImageBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A base64 string of the cover image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem.")

  public String getCoverImageBase64() {
    return coverImageBase64;
  }


  public void setCoverImageBase64(String coverImageBase64) {
    this.coverImageBase64 = coverImageBase64;
  }


  public UpdateEcosystemRequest primaryColorHex(String primaryColorHex) {
    
    this.primaryColorHex = primaryColorHex;
    return this;
  }

   /**
   * A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem.
   * @return primaryColorHex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem.")

  public String getPrimaryColorHex() {
    return primaryColorHex;
  }


  public void setPrimaryColorHex(String primaryColorHex) {
    this.primaryColorHex = primaryColorHex;
  }


  public UpdateEcosystemRequest resetPublishedKey(Boolean resetPublishedKey) {
    
    this.resetPublishedKey = resetPublishedKey;
    return this;
  }

   /**
   * Revokes the ecosystem&#39;s previous published key and returns a new one if true.
   * @return resetPublishedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revokes the ecosystem's previous published key and returns a new one if true.")

  public Boolean getResetPublishedKey() {
    return resetPublishedKey;
  }


  public void setResetPublishedKey(Boolean resetPublishedKey) {
    this.resetPublishedKey = resetPublishedKey;
  }


  public UpdateEcosystemRequest resetSecretKey(Boolean resetSecretKey) {
    
    this.resetSecretKey = resetSecretKey;
    return this;
  }

   /**
   * Revokes the ecosystem&#39;s previous secret key and returns a new on if true.
   * @return resetSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revokes the ecosystem's previous secret key and returns a new on if true.")

  public Boolean getResetSecretKey() {
    return resetSecretKey;
  }


  public void setResetSecretKey(Boolean resetSecretKey) {
    this.resetSecretKey = resetSecretKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEcosystemRequest updateEcosystemRequest = (UpdateEcosystemRequest) o;
    return Objects.equals(this.name, updateEcosystemRequest.name) &&
        Objects.equals(this.email, updateEcosystemRequest.email) &&
        Objects.equals(this.currentPassword, updateEcosystemRequest.currentPassword) &&
        Objects.equals(this.newPassword, updateEcosystemRequest.newPassword) &&
        Objects.equals(this.iconImageBase64, updateEcosystemRequest.iconImageBase64) &&
        Objects.equals(this.coverImageBase64, updateEcosystemRequest.coverImageBase64) &&
        Objects.equals(this.primaryColorHex, updateEcosystemRequest.primaryColorHex) &&
        Objects.equals(this.resetPublishedKey, updateEcosystemRequest.resetPublishedKey) &&
        Objects.equals(this.resetSecretKey, updateEcosystemRequest.resetSecretKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, email, currentPassword, newPassword, iconImageBase64, coverImageBase64, primaryColorHex, resetPublishedKey, resetSecretKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEcosystemRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    currentPassword: ").append(toIndentedString(currentPassword)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    iconImageBase64: ").append(toIndentedString(iconImageBase64)).append("\n");
    sb.append("    coverImageBase64: ").append(toIndentedString(coverImageBase64)).append("\n");
    sb.append("    primaryColorHex: ").append(toIndentedString(primaryColorHex)).append("\n");
    sb.append("    resetPublishedKey: ").append(toIndentedString(resetPublishedKey)).append("\n");
    sb.append("    resetSecretKey: ").append(toIndentedString(resetSecretKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("currentPassword");
    openapiFields.add("newPassword");
    openapiFields.add("iconImageBase64");
    openapiFields.add("coverImageBase64");
    openapiFields.add("primaryColorHex");
    openapiFields.add("resetPublishedKey");
    openapiFields.add("resetSecretKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateEcosystemRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateEcosystemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEcosystemRequest is not found in the empty JSON string", UpdateEcosystemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateEcosystemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEcosystemRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("currentPassword") != null && !jsonObj.get("currentPassword").isJsonNull()) && !jsonObj.get("currentPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPassword").toString()));
      }
      if ((jsonObj.get("newPassword") != null && !jsonObj.get("newPassword").isJsonNull()) && !jsonObj.get("newPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newPassword").toString()));
      }
      if ((jsonObj.get("iconImageBase64") != null && !jsonObj.get("iconImageBase64").isJsonNull()) && !jsonObj.get("iconImageBase64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconImageBase64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconImageBase64").toString()));
      }
      if ((jsonObj.get("coverImageBase64") != null && !jsonObj.get("coverImageBase64").isJsonNull()) && !jsonObj.get("coverImageBase64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverImageBase64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverImageBase64").toString()));
      }
      if ((jsonObj.get("primaryColorHex") != null && !jsonObj.get("primaryColorHex").isJsonNull()) && !jsonObj.get("primaryColorHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryColorHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryColorHex").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEcosystemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEcosystemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEcosystemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEcosystemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEcosystemRequest>() {
           @Override
           public void write(JsonWriter out, UpdateEcosystemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEcosystemRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateEcosystemRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateEcosystemRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateEcosystemRequest
  */
  public static UpdateEcosystemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEcosystemRequest.class);
  }

 /**
  * Convert an instance of UpdateEcosystemRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

