/*
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.metafab.client.JSON;

/**
 * WithdrawFromExchangeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-30T14:29:33.858390-07:00[America/Los_Angeles]")
public class WithdrawFromExchangeRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public static final String SERIALIZED_NAME_CURRENCY_ADDRESS = "currencyAddress";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ADDRESS)
  private String currencyAddress;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_COLLECTION_ADDRESS = "collectionAddress";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ADDRESS)
  private String collectionAddress;

  public static final String SERIALIZED_NAME_COLLECTION_ID = "collectionId";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ID)
  private String collectionId;

  public static final String SERIALIZED_NAME_ITEM_IDS = "itemIds";
  @SerializedName(SERIALIZED_NAME_ITEM_IDS)
  private List<BigDecimal> itemIds = null;

  public WithdrawFromExchangeRequest() {
  }

  public WithdrawFromExchangeRequest address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * A valid EVM based address to withdraw to. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid EVM based address to withdraw to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public WithdrawFromExchangeRequest walletId(String walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Any wallet id within the MetaFab ecosystem to withdraw to.
   * @return walletId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any wallet id within the MetaFab ecosystem to withdraw to.")

  public String getWalletId() {
    return walletId;
  }


  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public WithdrawFromExchangeRequest currencyAddress(String currencyAddress) {
    
    this.currencyAddress = currencyAddress;
    return this;
  }

   /**
   * The address of the currency (ERC20) token to withdraw from the exchange. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the exchange will be withdrawn.
   * @return currencyAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The address of the currency (ERC20) token to withdraw from the exchange. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the exchange will be withdrawn.")

  public String getCurrencyAddress() {
    return currencyAddress;
  }


  public void setCurrencyAddress(String currencyAddress) {
    this.currencyAddress = currencyAddress;
  }


  public WithdrawFromExchangeRequest currencyId(String currencyId) {
    
    this.currencyId = currencyId;
    return this;
  }

   /**
   * A valid MetaFab currency id that represents the currency token to withdraw from the exchange. &#x60;currencyAddress&#x60; or &#x60;currencyId&#x60; can be provided when withdrawing currency.
   * @return currencyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid MetaFab currency id that represents the currency token to withdraw from the exchange. `currencyAddress` or `currencyId` can be provided when withdrawing currency.")

  public String getCurrencyId() {
    return currencyId;
  }


  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public WithdrawFromExchangeRequest collectionAddress(String collectionAddress) {
    
    this.collectionAddress = collectionAddress;
    return this;
  }

   /**
   * The address of the collection (ERC1155) for the items to withdraw from the exchange. If no currencyAddress and no collectionAddress is provided, the native token held by the exchange will be withdrawn.
   * @return collectionAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The address of the collection (ERC1155) for the items to withdraw from the exchange. If no currencyAddress and no collectionAddress is provided, the native token held by the exchange will be withdrawn.")

  public String getCollectionAddress() {
    return collectionAddress;
  }


  public void setCollectionAddress(String collectionAddress) {
    this.collectionAddress = collectionAddress;
  }


  public WithdrawFromExchangeRequest collectionId(String collectionId) {
    
    this.collectionId = collectionId;
    return this;
  }

   /**
   * A valid MetaFab collection id that represents the collection for the items to withdraw from the exchange. &#x60;collectionAddress&#x60; or &#x60;collectionId&#x60; can be provided when withdrawing items.
   * @return collectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid MetaFab collection id that represents the collection for the items to withdraw from the exchange. `collectionAddress` or `collectionId` can be provided when withdrawing items.")

  public String getCollectionId() {
    return collectionId;
  }


  public void setCollectionId(String collectionId) {
    this.collectionId = collectionId;
  }


  public WithdrawFromExchangeRequest itemIds(List<BigDecimal> itemIds) {
    
    this.itemIds = itemIds;
    return this;
  }

  public WithdrawFromExchangeRequest addItemIdsItem(BigDecimal itemIdsItem) {
    if (this.itemIds == null) {
      this.itemIds = new ArrayList<>();
    }
    this.itemIds.add(itemIdsItem);
    return this;
  }

   /**
   * The specific itemIds of the provided collection to withdraw from the exchange.
   * @return itemIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The specific itemIds of the provided collection to withdraw from the exchange.")

  public List<BigDecimal> getItemIds() {
    return itemIds;
  }


  public void setItemIds(List<BigDecimal> itemIds) {
    this.itemIds = itemIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WithdrawFromExchangeRequest withdrawFromExchangeRequest = (WithdrawFromExchangeRequest) o;
    return Objects.equals(this.address, withdrawFromExchangeRequest.address) &&
        Objects.equals(this.walletId, withdrawFromExchangeRequest.walletId) &&
        Objects.equals(this.currencyAddress, withdrawFromExchangeRequest.currencyAddress) &&
        Objects.equals(this.currencyId, withdrawFromExchangeRequest.currencyId) &&
        Objects.equals(this.collectionAddress, withdrawFromExchangeRequest.collectionAddress) &&
        Objects.equals(this.collectionId, withdrawFromExchangeRequest.collectionId) &&
        Objects.equals(this.itemIds, withdrawFromExchangeRequest.itemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, walletId, currencyAddress, currencyId, collectionAddress, collectionId, itemIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WithdrawFromExchangeRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    currencyAddress: ").append(toIndentedString(currencyAddress)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    collectionAddress: ").append(toIndentedString(collectionAddress)).append("\n");
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    itemIds: ").append(toIndentedString(itemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("walletId");
    openapiFields.add("currencyAddress");
    openapiFields.add("currencyId");
    openapiFields.add("collectionAddress");
    openapiFields.add("collectionId");
    openapiFields.add("itemIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WithdrawFromExchangeRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WithdrawFromExchangeRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WithdrawFromExchangeRequest is not found in the empty JSON string", WithdrawFromExchangeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WithdrawFromExchangeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WithdrawFromExchangeRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if ((jsonObj.get("currencyAddress") != null && !jsonObj.get("currencyAddress").isJsonNull()) && !jsonObj.get("currencyAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyAddress").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("collectionAddress") != null && !jsonObj.get("collectionAddress").isJsonNull()) && !jsonObj.get("collectionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionAddress").toString()));
      }
      if ((jsonObj.get("collectionId") != null && !jsonObj.get("collectionId").isJsonNull()) && !jsonObj.get("collectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionId").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("itemIds") != null && !jsonObj.get("itemIds").isJsonNull()) && !jsonObj.get("itemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemIds` to be an array in the JSON string but got `%s`", jsonObj.get("itemIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WithdrawFromExchangeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WithdrawFromExchangeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WithdrawFromExchangeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WithdrawFromExchangeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WithdrawFromExchangeRequest>() {
           @Override
           public void write(JsonWriter out, WithdrawFromExchangeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WithdrawFromExchangeRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WithdrawFromExchangeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WithdrawFromExchangeRequest
  * @throws IOException if the JSON string is invalid with respect to WithdrawFromExchangeRequest
  */
  public static WithdrawFromExchangeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WithdrawFromExchangeRequest.class);
  }

 /**
  * Convert an instance of WithdrawFromExchangeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

